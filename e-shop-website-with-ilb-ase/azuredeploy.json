{
  "$schema": "http://schema.management.azure.com/schemas/2014-04-01-preview/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "existingASEName": {
      "type": "string",
      "defaultValue": "<YourName>-eshop-<Date>",
      "metadata": {
        "description": "Name of the App Service Environment."
      }
    },
    "existingASELocation": {
      "type": "string",
      "metadata": {
        "description": "Location of the App Service Environment."
      }
    },
    "sqlServerAdministratorLogin": {
      "type": "string",
      "defaultValue": "eshop-admin",
      "metadata": {
        "description": "Administrator login name of the Azure SQL Server."
      }
    },
    "sqlServerAdministratorLoginPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Administrator login password of the Azure SQL Server."
      }
    },
    "azureAdTenantId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Directory ID of the Azure Active Directory used by the Admin App."
      }
    },
    "azureAdClientId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Application ID of the Admin App Registration."
      }
    },
    "sourceCodeRepositoryURL": {
      "type": "string",
      "defaultValue": "https://github.com/<YourAccount>/azure-quickstart-templates",
      "metadata": {
        "description": "Source code repository URL"
      }
    },
    "sourceCodeBranch": {
      "type": "string",
      "defaultValue": "master",
      "metadata": {
        "description": "Sourcecode Repo branch"
      }
    },
    "sourceCodeManualIntegration": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Use 'true' if you are deploying from the base repo, 'false' if you are deploying from your own fork. If you're using 'false', make sure you have admin permissions to the repo. If you get an error, you should add GitHub integration to another web app manually, so that you get a GitHub access token associated with your Azure Subscription."
      }
    }
  },
  "variables": {
    "location": "[parameters('existingAseLocation')]",
    "vnetName": "[concat(parameters('existingAseName'), '-vnet')]",
    "aseSubnetName": "[concat(parameters('existingAseName'), '-subnet')]",
    "agSubnetName": "app-gateway-subnet",
    "subnetRouteTableName": "[concat(parameters('existingAseName'), '-route-table')]",
    "subnetNSGName": "[concat(parameters('existingAseName'), '-nsg')]",
    "aspName": "[concat(parameters('existingAseName'), '-asp')]",
    "webAppName": "[concat(parameters('existingAseName'), '-web')]",
    "contentAppName": "[concat(parameters('existingAseName'), '-content')]",
    "apiAppName": "[concat(parameters('existingAseName'), '-api')]",
    "adminAppName": "[concat(parameters('existingAseName'), '-admin')]",
    "appInsightsName": "[concat(parameters('existingAseName'), '-app-insights')]",
    "sqlServerName": "[concat(parameters('existingAseName'), '-sql-server')]",
    "storageAccountName": "[concat(replace(parameters('existingAseName'), '-', ''), '')]",
    "redisCacheName": "[concat(parameters('existingAseName'), '-cache')]",
    "redisCacheSubnetName": "redis-cache-subnet",
    "appGatewayName": "[concat(parameters('existingAseName'), '-waf')]",
    "appGatewayID": "[resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName'))]",
    "appGatewayPublicIPName": "[concat(parameters('existingAseName'), '-waf-ip')]",
    "appGatewayPublicIPDnsPrefix": "[concat(parameters('existingAseName'), '-waf')]",
    "cdnName": "[concat(parameters('existingAseName'), '-cdn')]",
    "cdnWebAppEndpointName": "[concat(parameters('existingAseName'), '-cdn-web')]",
    "cdnStorageEndpointName": "[concat(parameters('existingAseName'), '-cdn-storage')]"
  },
  "resources": [
    {
      "apiVersion": "2018-01-01",
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "name": "[concat(variables('vnetName'), '/', variables('redisCacheSubnetName'))]",
      "properties": {
        "addressPrefix": "192.168.251.0/26"
      }
    },
    {
      "apiVersion": "2018-01-01",
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "name": "[concat(variables('vnetName'), '/', variables('agSubnetName'))]",
      "properties": {
        "addressPrefix": "192.168.251.64/26"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets/', variables('vnetName'), variables('redisCacheSubnetName'))]"
      ]
    },
    {
      "apiVersion": "2015-05-01",
      "type": "microsoft.insights/components",
      "name": "[variables('appInsightsName')]",
      "location": "East US",
      "properties": {
        "ApplicationId": "[variables('appInsightsName')]",
        "Request_Source": "IbizaWebAppExtensionCreate"
      }
    },
    {
      "apiVersion": "2016-03-01",
      "type": "Microsoft.Web/serverfarms",
      "name": "[variables('aspName')]",
      "location": "[variables('location')]",
      "kind": "app",
      "properties": {
        "name": "[variables('aspName')]",
        "workerSize": "0",
        "workerSizeId": "0",
        "numberOfWorkers": "1",
        "reserved": false,
        "hostingEnvironment": "[parameters('existingAseName')]"
      },
      "sku": {
        "tier": "Isolated",
        "name": "I1"
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Sql/servers",
      "location": "[variables('location')]",
      "name": "[variables('sqlServerName')]",
      "properties": {
        "administratorLogin": "[parameters('sqlServerAdministratorLogin')]",
        "administratorLoginPassword": "[parameters('sqlServerAdministratorLoginPassword')]",
        "version": "12.0"
      },
      "resources": [
        {
          "apiVersion": "2014-04-01-preview",
          "type": "databases",
          "location": "[variables('location')]",
          "name": "Catalog",
          "properties": {
            "collation": "SQL_Latin1_General_CP1_CI_AS",
            "edition": "Basic",
            "maxSizeBytes": "104857600",
            "zoneRedundant": false
          },
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers/', variables('sqlServerName'))]"
          ]
        },
        {
          "apiVersion": "2014-04-01-preview",
          "type": "databases",
          "location": "[variables('location')]",
          "name": "Sales",
          "properties": {
            "collation": "SQL_Latin1_General_CP1_CI_AS",
            "edition": "Basic",
            "maxSizeBytes": "104857600",
            "zoneRedundant": false
          },
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers/', variables('sqlServerName'))]"
          ]
        },
        {
          "apiVersion": "2014-04-01-preview",
          "type": "databases",
          "location": "[variables('location')]",
          "name": "Identity",
          "properties": {
            "collation": "SQL_Latin1_General_CP1_CI_AS",
            "edition": "Basic",
            "maxSizeBytes": "104857600",
            "zoneRedundant": false
          },
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers/', variables('sqlServerName'))]"
          ]
        },
        {
          "apiVersion": "2015-05-01-preview",
          "type": "virtualNetworkRules",
          "name": "[concat('allow-access-from-', variables('aseSubnetName'))]",
          "scale": null,
          "properties": {
            "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets/', variables('vnetName'), variables('aseSubnetName'))]"
          },
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers/', variables('sqlServerName'))]"
          ]
        }
      ]
    },
    {
      "apiVersion": "2017-10-01",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard_RAGRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": false,
        "accessTier": "Hot",
        "encryption": {
          "services": {
            "blob": {
              "enabled": true
            },
            "file": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      },
      "dependsOn": []
    },
    {
      "apiVersion": "2017-10-01",
      "type": "Microsoft.Cache/Redis",
      "name": "[variables('redisCacheName')]",
      "location": "[variables('location')]",
      "properties": {
        "sku": {
          "name": "Premium",
          "family": "P",
          "capacity": 1
        },
        "subnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets/', variables('vnetName'), variables('redisCacheSubnetName'))]",
        "staticIP": "192.168.251.62",
        "redisConfiguration": {},
        "enableNonSslPort": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets/', variables('vnetName'), variables('redisCacheSubnetName'))]"
      ]
    },
    {
      "apiVersion": "2016-03-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('contentAppName')]",
      "location": "[variables('location')]",
      "properties": {
        "name": "[variables('contentAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms/', variables('aspName'))]",
        "hostingEnvironment": "[parameters('existingAseName')]",
        "siteConfig": {
          "alwaysOn": true
        }
      }
    }
  ],
  "outputs": {
    
  }
}