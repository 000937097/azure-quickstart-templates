{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "resourcePrefix": {
      "type": "string",
      "maxLength": 6,
      "minLength": 3,
      "metadata": {
        "description": "The prefix that should be used to create the resource names."
      }
    },
    "osType": {
      "type": "string",
      "allowedValues": [
        "Windows Server 2016 Datacenter",
        "SLES 12",
        "SLES 12 BYOS"
      ],
      "defaultValue": "Windows Server 2016 Datacenter",
      "metadata": {
        "description": "The type of the operating system you want to deploy."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "minLength": 12,
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "newOrExistingSubnet": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Determines whether a new virtual network and subnet should be created or an existing subnet should be used."
      }
    },
    "subnetId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The id of the subnet you want to use."
      }
    }
  },
  "variables": {
    "github": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/sap-2-tier-marketplace-image/shared/",
    "images": {      
      "Windows Server 2016 Datacenter": {
        "sku": "2016-Datacenter",
        "offer": "WindowsServer",
        "publisher": "MicrosoftWindowsServer",
        "version": "latest",
        "OSType": "Windows",
        "Plan": {},
        "UsePlan": false
      },
      "SLES 12": {
        "sku": "12-SP1",
        "offer": "SLES-SAP",
        "publisher": "SUSE",
        "version": "latest",
        "OSType": "Linux",
        "Plan": {},
        "UsePlan": false
      },
      "SLES 12 BYOS": {
        "sku": "12-SP1",
        "offer": "SLES-SAP-BYOS",
        "publisher": "SUSE",
        "OSType": "Linux",
        "version": "latest",
        "Plan": {},
        "UsePlan": false
      },
      "RHEL 7.2": {
        "sku": "7.2",
        "offer": "RHEL",
        "publisher": "RedHat",
        "version": "latest",
        "OSType": "Linux",
        "Plan": {},
        "UsePlan": false
      },
      "Oracle Linux 7.2": {
        "sku": "7.2",
        "offer": "Oracle-Linux",
        "publisher": "Oracle",
        "version": "latest",
        "OSType": "Linux",
        "Plan": {},
        "UsePlan": false
      }
    },
    "imageSku": "[variables('images')[parameters('osType')].sku]",
    "imagePublisher": "[variables('images')[parameters('osType')].publisher]",
    "imageOffer": "[variables('images')[parameters('osType')].offer]",
    "imageVersion": "[variables('images')[parameters('osType')].version]",
    "internalOSType": "[variables('images')[parameters('osType')].OSType]",
    "csExtension": {
      "Windows": {
        "script": "[concat(variables('github'), 'noop.ps1')]",
        "scriptCall": "powershell.exe -ExecutionPolicy bypass -File noop.ps1"
      },
      "Linux": {
        "script": "[concat(variables('github'), 'noop.sh')]",
        "scriptCall": "sh noop.sh"
      }
    },
    "vmSizes": {      
        "nfsserversize": "Standard_DS2_v2",
        "nfsservercount": 2,
        "nfsserverdisks": [
          {
            "size": 128
          }
        ]
    },
    "internalExtensionScriptCL": "[variables('csExtension')[variables('internalOSType')].script]",
    "internalExtensionScriptCallCL": "[variables('csExtension')[variables('internalOSType')].scriptCall]",
    "internalExtensionScriptCallArgsCL": "",
    "nfsvmSize": "[variables('vmSizes').nfsserversize]",
    "nfsvmCount": "[variables('vmSizes').nfsservercount]",
    "nfsvmDataDisks": "[variables('vmSizes').nfsserverdisks]",
    "sidlower": "[toLower(parameters('resourcePrefix'))]",
    "vmName": "[variables('sidlower')]",
    "vnetName": "[concat(variables('sidlower'), '-vnet')]",
    "publicIPAddressType": "Dynamic",
    "addressPrefix": "10.0.0.0/16",
    "subnetName": "Subnet",
    "subnetPrefix": "10.0.0.0/24",
    "subnets": {
      "new": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '/subnets/', variables('subnetName'))]",
      "existing": "[parameters('subnetId')]"
    },
    "selectedSubnetId": "[variables('subnets')[parameters('newOrExistingSubnet')]]",
    "nestedDeploymentName": "nestedTemplate",
    "nestedDeploymentNameVNet": "[concat(variables('nestedDeploymentName'), 'vnet')]",
    "nestedDeploymentNamePIP": "[concat(variables('nestedDeploymentName'), 'pip')]",
    "nestedDeploymentNameCL": "[concat(variables('nestedDeploymentName'), 'nfs')]",
    "nestedDeploymentNameProf": "[concat(variables('nestedDeploymentName'), 'prof')]",
    "nestedDeploymentNameNIC": "[concat(variables('nestedDeploymentName'), 'nic')]",
    "nestedDeploymentNameNICCL": "[concat(variables('nestedDeploymentNameNIC'), 'nfs')]",
    "nestedDeploymentNameLBCL": "[concat(variables('nestedDeploymentName'), 'lbnfs')]",
    "publicIpNameCL": "[concat(variables('sidlower'), '-pip-nfs')]",
    "avSetNameCL": "[concat(variables('sidlower'), '-avset-nfs')]",
    "nestedDeploymentNameNSG": "[concat(variables('nestedDeploymentNameCL'), 'nsg')]",
    "nsgNameCL": "[concat(variables('sidlower'), '-nsg')]",
    "internalStorageTypeCL": "Premium_LRS",
    "loadBalancerNameCL": "[concat(variables('sidlower'), '-lb-nfs')]",
    "vmNameCL": "[concat(variables('vmName'), '-nfs')]",
    "nicNameCL": "[concat(variables('sidlower'), '-nic-nfs')]",
    "osDiskType": "image"
  },
  "resources": [
    {
      "apiVersion": "2015-01-01",
      "name": "[variables('nestedDeploymentNameNSG')]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('github'), parameters('newOrExistingSubnet'), 'nsg.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "nsgName": {
            "value": "[variables('nsgNameCL')]"
          },
          "osType": {
            "value": "[variables('internalOSType')]"
          }
        }
      }
    },
    {
      "apiVersion": "2015-01-01",
      "name": "[variables('nestedDeploymentNameVnet')]",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', variables('nestedDeploymentNameNSG'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('github'), parameters('newOrExistingSubnet'), 'vnetnsg.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vnetName": {
            "value": "[variables('vnetName')]"
          },
          "addressPrefix": {
            "value": "[variables('addressPrefix')]"
          },
          "subnetName": {
            "value": "[variables('subnetName')]"
          },
          "subnetPrefix": {
            "value": "[variables('subnetPrefix')]"
          },
          "nsgName": {
            "value": "[variables('nsgNameCL')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('avSetNameCL')]",
      "apiVersion": "2017-03-30",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Aligned"
      },
      "properties": {
        "platformFaultDomainCount": 3,
        "platformUpdateDomainCount": 20
      }
    },
    {
      "apiVersion": "2015-01-01",
      "name": "[concat(variables('nestedDeploymentNamePIP'), '-', copyIndex())]",
      "type": "Microsoft.Resources/deployments",
      "copy": {
        "name": "pipLoop",
        "count": "[variables('nfsvmCount')]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('github'), parameters('newOrExistingSubnet'), 'pip.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "publicIpName": {
            "value": "[concat(variables('publicIpNameCL'), '-', copyIndex())]"
          },
          "publicIPAddressType": {
            "value": "[variables('publicIPAddressType')]"
          }
        }
      }
    },
    {
      "apiVersion": "2015-01-01",
      "name": "[variables('nestedDeploymentNameLBCL')]",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', variables('nestedDeploymentNameVnet'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('github'), 'loadbalancer.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "loadBalancerName": {
            "value": "[variables('loadBalancerNameCL')]"
          },
          "sapSystemCount": {
            "value": 1
          },
          "stackType": {
            "value": ""
          },
          "osType": {
            "value": "[variables('internalOSType')]"
          },
          "createXSCS": {
            "value": false
          },
          "createDB": {
            "value": false
          },
          "dbType": {
            "value": ""
          },
          "subnetId": {
            "value": "[variables('selectedSubnetId')]"
          },
          "github": {
            "value": "[variables('github')]"
          }
        }
      }
    },
    {
      "apiVersion": "2015-01-01",
      "name": "[concat(variables('nestedDeploymentNameNICCL'), '-', copyIndex())]",
      "type": "Microsoft.Resources/deployments",
      "copy": {
        "name": "nicConfigCLLoop",
        "count": "[variables('nfsvmCount')]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('github'), 'nic-config.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vnetName": {
            "value": "[variables('vnetName')]"
          },
          "subnetName": {
            "value": "[variables('subnetName')]"
          },
          "publicIpName": {
            "value": "[concat(variables('publicIpNameCL'), '-', copyIndex())]"
          },
          "nsgName": {
            "value": ""
          },
          "newOrExistingSubnet": {
            "value": "[parameters('newOrExistingSubnet')]"
          },
          "subnetId": {
            "value": "[parameters('subnetId')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicNameCL'), '-', copyIndex())]",
      "apiVersion": "2015-06-15",
      "copy": {
        "name": "nicCLLoop",
        "count": "[variables('nfsvmCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', variables('nestedDeploymentNamePIP'), '-', copyIndex())]",
        "[concat('Microsoft.Resources/deployments/', variables('nestedDeploymentNameNICCL'), '-', copyIndex())]",
        "[concat('Microsoft.Resources/deployments/', variables('nestedDeploymentNameVnet'))]",
        "[concat('Microsoft.Resources/deployments/', variables('nestedDeploymentNameLBCL'))]"
      ],
      "location": "[resourceGroup().location]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": "[reference(concat(variables('nestedDeploymentNameNICCL'), '-', copyIndex())).outputs.selectedConfiguration.value.publicIPAddress]",
              "subnet": "[reference(concat(variables('nestedDeploymentNameNICCL'), '-', copyIndex())).outputs.selectedConfiguration.value.subnet]",
              "loadBalancerBackendAddressPools": "[reference(variables('nestedDeploymentNameLBCL')).outputs.nicBackAddressPools.value]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-01-01",
      "name": "[concat(variables('nestedDeploymentNameProf'), '-nfs-', copyIndex())]",
      "type": "Microsoft.Resources/deployments",
      "copy": {
        "name": "osDiskPartsCLLoop",
        "count": "[variables('nfsvmCount')]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('github'), 'os-disk-parts-md.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "imageSku": {
            "value": "[variables('imageSku')]"
          },
          "imagePublisher": {
            "value": "[variables('imagePublisher')]"
          },
          "imageOffer": {
            "value": "[variables('imageOffer')]"
          },
          "imageVersion": {
            "value": "[variables('imageVersion')]"
          },
          "osDiskType": {
            "value": "[variables('osDiskType')]"
          },
          "osType": {
            "value": "[variables('internalOSType')]"
          },
          "sidlower": {
            "value": "[variables('sidlower')]"
          },
          "vmName": {
            "value": "[concat(variables('vmNameCL'), '-', copyIndex())]"
          },
          "storageType": {
            "value": "[variables('internalStorageTypeCL')]"
          }
        }
      }
    },
    {
      "apiVersion": "2015-01-01",
      "name": "[concat(variables('nestedDeploymentNameCL'), '-', copyIndex())]",
      "type": "Microsoft.Resources/deployments",
      "copy": {
        "name": "vmCLLoop",
        "count": "[variables('nfsvmCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicNameCL'), '-', copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('avSetNameCL'))]",
        "[concat('Microsoft.Resources/deployments/', variables('nestedDeploymentNameProf'), '-nfs-', copyIndex())]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('github'), 'server-md.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "imageReference": {
            "value": "[reference(concat(variables('nestedDeploymentNameProf'), '-nfs-', copyIndex())).outputs.imageReference.value]"
          },
          "osDisk": {
            "value": "[reference(concat(variables('nestedDeploymentNameProf'), '-nfs-', copyIndex())).outputs.osDisk.value]"
          },
          "osDiskType": {
            "value": "[variables('osDiskType')]"
          },
          "vmName": {
            "value": "[concat(variables('vmNameCL'), '-', copyIndex())]"
          },
          "vmSize": {
            "value": "[variables('nfsvmSize')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "csExtensionScript": {
            "value": "[variables('internalExtensionScriptCL')]"
          },
          "csExtensionscriptCall": {
            "value": "[variables('internalExtensionScriptCallCL')]"
          },
          "csExtensionscriptArgs": {
            "value": "[variables('internalExtensionScriptCallArgsCL')]"
          },
          "avSetObj": {
            "value": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('avSetNameCL'))]"
            }
          },
          "useAVSet": {
            "value": true
          },
          "nicName": {
            "value": "[concat(variables('nicNameCL'), '-', copyIndex())]"
          },
          "dataDisksObj": {
            "value": {
              "copy": [
                {
                  "name": "dataDisks",
                  "count": "[length(variables('nfsvmDataDisks'))]",
                  "input": {
                    "lun": "[copyIndex('dataDisks')]",
                    "createOption": "Empty",
                    "diskSizeGB": "[variables('nfsvmDataDisks')[copyIndex('dataDisks')].size]"
                  }
                }
              ]
            }
          },
          "osType": {
            "value": "[variables('internalOSType')]"
          }
        }
      }
    }
  ]
}