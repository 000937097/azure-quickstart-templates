{
   "$schema":"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
   "contentVersion":"1.0.0.0",
   "parameters":{
      "webserviceName":{
         "type":"string",
         "metadata":{
            "description":"The name of the Azure Machine Learning Web Service."
         }
      },
      "workspaceName":{
         "type":"string",
         "metadata":{
            "description":"The name of the Azure Machine Learning Workspace."
         }
      },
      "location":{
         "type":"string",
         "defaultValue":"[resourceGroup().location]",
         "metadata":{
            "description":"The location of the Azure Machine Learning Workspace."
         }
      },
      "environmentName":{
         "type":"string",
         "defaultValue":"",
         "metadata":{
            "description":"Name of Azure Machine Learning Environment for deployment. See https://docs.microsoft.com/en-us/azure/machine-learning/how-to-use-environments and https://docs.microsoft.com/en-us/azure/machine-learning/resource-curated-environments ."
         }
      },
      "environmentVersion":{
         "type":"string",
         "defaultValue":"",
         "metadata":{
            "description":"Version of Azure Machine Learning Environment for deployment."
         }
      },
      "cpu":{
         "defaultValue":"0.1",
         "type":"string",
         "metadata":{
            "description":"The default number of CPU cores to allocate for this Webservice. Can be a decimal."
         }
      },
      "cpuLimit":{
         "defaultValue":"1.0",
         "type":"string",
         "metadata":{
            "description":"The max number of CPU cores this Webservice is allowed to use. Can be a decimal."
         }
      },
      "gpu":{
         "defaultValue":0,
         "type":"int",
         "metadata":{
            "description":"The number of gpu cores to allocate for this Webservice"
         }
      },
      "memoryInGB":{
         "defaultValue":"1.0",
         "type":"string",
         "metadata":{
            "description":"The amount of memory (in GB) to allocate for this Webservice. Can be a decimal."
         }
      },
      "driverProgram":{
         "type":"string",
         "defaultValue":"",
         "metadata":{
            "description":"Relative path of a file from storage account that contains the code to run for service."
         }
      },
      "computeType":{
         "type":"string",
         "defaultValue":"ACI",
         "allowedValues":[
            "ACI",
            "AKS"
         ],
         "metadata":{
            "description":"Compute type of service to deploy."
         }
      },
      "computeTarget":{
         "type":"string",
         "defaultValue":"",
         "metadata":{
            "description":"Name of compute target. Only applicable when deploying to AKS."
         }
      },
      "numReplicas":{
         "type":"int",
         "defaultValue":"",
         "metadata":{
            "description":"The number of containers to allocate for this Webservice. No default, if this parameter is not set then the autoscaler is enabled by default. Only applicable when deploying to AKS."
         }
      },
      "modelIds":{
         "type":"array",
         "defaultValue":[
            
         ],
         "metadata":{
            "description":"The IDs of the model to be deployed. Model Id takes the form of <model name>:<model version>. Models need to be registered first."
         }
      },
      "models":{
         "type":"array",
         "defaultValue":[
            
         ],
         "metadata":{
            "description":"Details of the models to be deployed. Each model must have the following properties: 'name'(name of the model), 'path'(relative path of a file from storage account linked to Workspace), 'mimeType'(MIME type of Model content. For more details about MIME type, please open https://www.iana.org/assignments/media-types/media-types.xhtml), 'framework'(framework of the model, use Custom if unsure) and 'frameworkVersion'(framework version of the model)."
         }
      },
      "authEnabled":{
         "type":"bool",
         "defaultValue":false,
         "metadata":{
            "description":"Whether or not to enable key auth for this Webservice."
         }
      },
      "tokenAuthEnabled":{
         "type":"bool",
         "defaultValue":false,
         "metadata":{
            "description":"Whether or not to enable token auth for this Webservice.  Only applicable when deploying to AKS."
         }
      },
      "primaryKey":{
         "type":"securestring",
         "defaultValue":"",
         "metadata":{
            "description":"A primary auth key to use for this Webservice."
         }
      },
      "secondaryKey":{
         "type":"securestring",
         "defaultValue":"",
         "metadata":{
            "description":"A secondary auth key to use for this Webservice."
         }
      },
      "scoringTimeoutMilliSeconds":{
         "type":"int",
         "defaultValue":60000,
         "metadata":{
            "description":"A timeout to enforce for scoring calls to this Webservice."
         }
      },
      "appInsightsEnabled":{
         "type":"bool",
         "defaultValue":false,
         "metadata":{
            "description":"Whether or not to enable AppInsights for this Webservice."
         }
      },
      "autoScaleEnabled":{
         "type":"bool",
         "defaultValue":false,
         "metadata":{
            "description":"Whether or not to enable autoscaling for this Webservice. Defaults to True if num_replicas is None. Only applicable when deploying to AKS."
         }
      },
      "autoScaleMinReplicas":{
         "type":"int",
         "defaultValue":1,
         "metadata":{
            "description":"The minimum number of containers to use when autoscaling this Webservice. Only applicable when deploying to AKS."
         }
      },
      "autoScaleMaxReplicas":{
         "type":"int",
         "defaultValue":10,
         "metadata":{
            "description":"The maximum number of containers to use when autoscaling this Webservice. Only applicable when deploying to AKS."
         }
      },
      "autoscaleTargetUtilization":{
         "type":"int",
         "defaultValue":70,
         "metadata":{
            "description":"The target utilization (in percent out of 100) the autoscaler should attempt to maintain for this Webservice. Only applicable when deploying to AKS."
         }
      },
      "autoscaleRefreshSeconds":{
         "type":"int",
         "defaultValue":1,
         "metadata":{
            "description":"How often the autoscaler should attempt to scale this Webservice. Only applicable when deploying to AKS."
         }
      },
      "namespace":{
         "type":"string",
         "defaultValue":"",
         "metadata":{
            "description":"Kubernetes namespace in which to deploy the service: up to 63 lowercase alphanumeric ('a'-'z', '0'-'9') and hyphen ('-') characters. The first and last characters cannot be hyphens. Only applicable when deploying to AKS."
         }
      },
      "periodSeconds":{
         "type":"int",
         "defaultValue":10,
         "metadata":{
            "description":"How often (in seconds) to perform the liveness probe. Only applicable when deploying to AKS."
         }
      },
      "initialDelaySeconds":{
         "type":"int",
         "defaultValue":310,
         "metadata":{
            "description":"Number of seconds after the container has started before liveness probes are initiated. Only applicable when deploying to AKS."
         }
      },
      "timeoutSeconds":{
         "type":"int",
         "defaultValue":2,
         "metadata":{
            "description":"Number of seconds after which the liveness probe times out. Only applicable when deploying to AKS."
         }
      },
      "failureThreshold":{
         "type":"int",
         "defaultValue":2,
         "metadata":{
            "description":"When a Pod starts and the liveness probe fails, Kubernetes will try --failure-threshold times before giving up. Only applicable when deploying to AKS."
         }
      },
      "successThreshold":{
         "type":"int",
         "defaultValue":1,
         "metadata":{
            "description":"Minimum consecutive successes for the liveness probe to be considered successful after having failed. Only applicable when deploying to AKS."
         }
      }
   },
   "variables":{
      "driverProgram":"[trim(parameters('driverProgram'))]",
      "driverProgramFileName":"[last(split(trim(parameters('driverProgram')), '/'))]",
      "assets":[
         {
            "mimeType":"application/x-python",
            "url":"[if(startsWith(variables('driverProgram'), '/'), concat('aml://storage', variables('driverProgram')), concat('aml://storage/', variables('driverProgram')))]"
         }
      ],
      "copy":[
         {
            "name":"models",
            "count":"[length(parameters('models'))]",
            "mode":"serial",
            "input":{
               "name":"[parameters('models')[copyIndex('models')].name]",
               "url":"[if(startsWith(parameters('models')[copyIndex('models')].path, '/'), concat('aml://storage', parameters('models')[copyIndex('models')].path), concat('aml://storage/', parameters('models')[copyIndex('models')].path))]",
               "mimeType":"[parameters('models')[copyIndex('models')].mimeType]",
               "framework":"[parameters('models')[copyIndex('models')].framework]",
               "frameworkVersion":"[parameters('models')[copyIndex('models')].frameworkVersion]"
            }
         }
      ]
   },
   "resources":[
      {
         "type":"Microsoft.MachineLearningServices/workspaces/services",
         "apiVersion":"2018-11-19",
         "name":"[concat(parameters('workspaceName'), '/', parameters('webserviceName'))]",
         "location":"[parameters('location')]",
         "properties":{
            "environmentImageRequest":{
               "modelIds":"[if(empty(parameters('modelIds')), json('null'), parameters('modelIds'))]",
               "models":"[if(empty(parameters('modelIds')), variables('models'), json('null'))]",
               "driverProgram":"[if(empty(variables('driverProgramFileName')), json('null'), variables('driverProgramFileName'))]",
               "assets":"[if(empty(variables('driverProgramFileName')), json('null'), variables('assets'))]",
               "environmentReference":"[if(not(or(empty(parameters('environmentName')), empty(parameters('environmentVersion')))), createObject('name', parameters('environmentName'), 'version', parameters('environmentVersion')), json('null'))]"
            },
            "scoringTimeoutMs":"[parameters('scoringTimeoutMilliSeconds')]",
            "appInsightsEnabled":"[parameters('appInsightsEnabled')]",
            "authEnabled":"[parameters('authEnabled')]",
            "aadAuthEnabled":"[parameters('tokenAuthEnabled')]",
            "keys":"[if(not(or(empty(parameters('primaryKey')), empty(parameters('secondaryKey')))), createObject('primaryKey', parameters('primaryKey'), 'secondaryKey', parameters('secondaryKey')), json('null'))]",
            "ContainerResourceRequirements":{
               "cpu":"[parameters('cpu')]",
               "cpuLimit":"[parameters('cpuLimit')]",
               "gpu":"[parameters('gpu')]",
               "memoryInGB":"[parameters('memoryInGB')]"
            },
            "computeType":"[parameters('computeType')]",
            "computeName":"[if(equals(parameters('computeType'), 'AKS'), parameters('computeTarget'), json('null'))]",
            "numReplicas":"[if(and(equals(parameters('computeType'), 'AKS'), not(parameters('autoScaleEnabled'))), int(parameters('numReplicas')), json('null'))]",
            "autoScaler":"[if(and(equals(parameters('computeType'), 'AKS'), parameters('autoScaleEnabled')), createObject('autoscaleEnabled', parameters('autoScaleEnabled'), 'minReplicas', int(parameters('autoScaleMinReplicas')), 'maxReplicas', int(parameters('autoScaleMaxReplicas')), 'targetUtilization', int(parameters('autoscaleTargetUtilization')), 'refreshPeriodInSeconds', int(parameters('autoscaleRefreshSeconds'))), json('null'))]",
            "namespace":"[if(and(equals(parameters('computeType'), 'AKS'), not(empty(parameters('namespace')))), parameters('namespace'), json('null'))]",
            "livenessProbeRequirements":"[if(equals(parameters('computeType'), 'AKS'), createObject('periodSeconds', parameters('periodSeconds'), 'initialDelaySeconds', parameters('initialDelaySeconds'), 'timeoutSeconds' , parameters('timeoutSeconds'), 'failureThreshold', parameters('failureThreshold'), 'successThreshold', parameters('successThreshold')), json('null'))]"
         }
      }
   ]
}