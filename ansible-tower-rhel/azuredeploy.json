{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vmAnsibleTowerUsername": {
      "type": "string",
      "defaultValue": "demouser",
      "minLength": 1,
      "metadata": {
        "description": "Username for virtual machine that will have ansible tower installed"
      }
    },
    "sshKeyData": {
      "type": "string",
      "metadata": {
        "description": "Enter ssh rsa public key file string data."
      }
    },
    "ansibleTowerAdminPassword": {
      "type": "securestring",
      "minLength": 5,
      "metadata": {
        "description": "Password for ansible tower console admin"
      }
    },
    "ansibleTowerDatabasePassword": {
      "type": "securestring",
      "minLength": 5,
      "metadata": {
        "description": "Password for ansible tower database"
      }
    },
    "ansibleTowerVmSize": {
      "type": "string",
      "defaultValue": "Standard_D2_v2",
      "allowedValues": [
        "Standard_D1_v2",
        "Standard_DS1",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_DS2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_DS3",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_DS4",
        "Standard_D11",
        "Standard_DS11",
        "Standard_D12",
        "Standard_DS12",
        "Standard_D13",
        "Standard_DS13",
        "Standard_D14",
        "Standard_DS14"
      ],
      "metadata": {
        "description": "Vm size, for premium storage specify ds vms."
      }
    },
    "towerStorageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "Storage account type for ansible tower installed virtual machine"
      }
    },
    "vmClientUsername": {
      "type": "string",
      "defaultValue": "demouser",
      "minLength": 1,
      "metadata": {
        "description": "Username for client vm's"
      }
    },
    "vmClientPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for client vm's"
      }
    },
    "clientVmSize": {
      "type": "string",
      "defaultValue": "Standard_D2_v2",
      "allowedValues": [
        "Standard_D1_v2",
        "Standard_DS1",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_DS2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_DS3",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_DS4",
        "Standard_D11",
        "Standard_DS11",
        "Standard_D12",
        "Standard_DS12",
        "Standard_D13",
        "Standard_DS13",
        "Standard_D14",
        "Standard_DS14"
      ],
      "metadata": {
        "description": "Vm size, for premium storage specify ds vms."
      }
    },
    "clientStorageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "Storage account type for ansible agent virtual machine"
      }
    },
   "_artifactsLocation": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/ansible-tower-rhel/",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
      }
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated.Leave blank if unsure"
      },
      "defaultValue": ""
    } 
  },
  "variables": {
    "towerAvSet": "tower-avset",
    "clientAvSet": "client-avset",
    "ansibleNsgName": "tower-nsg",
    "clientNsgName": "client-nsg",
    "towerStorageAccountName": "[concat('towstorage',uniqueString(resourceGroup().id))]",
    "clientStorageAccountName": "[concat('clstorage',uniqueString(resourceGroup().id))]",
    "diagStorageAccountName": "[concat('dgstorage',uniqueString(resourceGroup().id))]",
    "ansibleVnetName": "ansible-vnet",
    "ansibleVnetPrefix": "10.0.0.0/16",
    "ansibleVnetTowerSubnetName": "tower-subnet",
    "ansibleVnetTowerSubnetPrefix": "10.0.0.0/24",
    "ansibleVnetClientSubnetName": "client-subnet",
    "ansibleVnetClientSubnetPrefix": "10.0.1.0/24",
    "ansibleVnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('ansibleVnetName'))]",
    "towerSubnetRef": "[concat(variables('ansibleVnetId'), '/subnets/', variables('ansibleVnetTowerSubnetName'))]",
    "clientSubnetRef": "[concat(variables('ansibleVnetId'), '/subnets/', variables('ansibleVnetClientSubnetName'))]",
    "pipTowerName": "public-ip-tower",
    "pipTowerDnsName": "[concat('tower', uniqueString(resourceGroup().id))]",
    "pipClient01Name": "public-ip-client01",
    "pipClient01DnsName": "[concat('client','01', uniqueString(resourceGroup().id))]",
    "pipClient02Name": "public-ip-client02",
    "pipClient02DnsName": "[concat('client','02', uniqueString(resourceGroup().id))]",
    "vmTowerName": "vm-ansible-tower",
    "vmClient01Name": "vm-client01",
    "vmClient02Name": "vm-client02",
    "vmAnsibleTowerNicName": "[concat(variables('vmTowerName'),'-nic')]",
    "vmClient01NicName": "[concat(variables('vmClient01Name'), '-nic')]",
    "vmClient02NicName": "[concat(variables('vmClient02Name'), '-nic')]",
    "vmAnsibleTowerOsDiskName": "[concat(variables('vmTowerName'),'-osdisk')]",
    "storageAccountContainerName": "vhds",
    "sshKeyPath": "[concat('/home/',parameters('vmAnsibleTowerUsername'),'/.ssh/authorized_keys')]",
    "vmClient01OsDiskName": "[concat(variables('vmClient01Name'),'-osdisk')]",
    "vmClient02OsDiskName": "[concat(variables('vmClient02Name'),'-osdisk')]",
    "scriptFileName": "installansibletowerscript.sh",
    "scriptStart": "su -c'sh ",
    "customScriptCommand": "[concat(variables('scriptStart'), variables('scriptFileName'), ' ')]",
    "scriptClose": "'",
    "scriptSpace": " "
  },
  "resources": [
    {
      "name": "[variables('towerAvSet')]",
      "type": "Microsoft.Compute/availabilitySets",
      "location": "[resourceGroup().location]",
      "comments": "This availability set will consist of ansible tower installed virtual machine",
      "apiVersion": "2015-06-15",
      "tags": {
        "displayName": "Availabilty Set-Tower"
      }
    },
    {
      "name": "[variables('clientAvSet')]",
      "type": "Microsoft.Compute/availabilitySets",
      "location": "[resourceGroup().location]",
      "comments": "This availability set will consist of virtual machine which are ansible agents or clients ",
      "apiVersion": "2015-06-15",
      "tags": {
        "displayName": "Availability Set-Client"
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('ansibleNsgName')]",
      "apiVersion": "2016-03-30",
      "location": "[resourceGroup().location]",
      "comments": "This will have firewall rules for Ansible Tower Virtual machine",
      "tags": {
        "displayName": "Tower-NSG"
      },
      "properties": {
        "securityRules": [
          {
            "name": "allow-80",
            "properties": {
              "access": "Allow",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "80",
              "direction": "Inbound",
              "priority": 201,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "allow-8080",
            "properties": {
              "access": "Allow",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "8080",
              "direction": "Inbound",
              "priority": 202,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "allow-443",
            "properties": {
              "access": "Allow",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "443",
              "direction": "Inbound",
              "priority": 203,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "default-allow-ssh",
            "properties": {
              "access": "Allow",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "22",
              "direction": "Inbound",
              "priority": 200,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('clientNsgName')]",
      "apiVersion": "2016-03-30",
      "location": "[resourceGroup().location]",
      "comments": "This nsg will have security rules for all ansible clients",
      "tags": {
        "displayName": "Client-NSG"
      },
      "properties": {
        "securityRules": [
          {
            "name": "allow-80",
            "properties": {
              "access": "Allow",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "80",
              "direction": "Inbound",
              "priority": 301,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "allow-8080",
            "properties": {
              "access": "Allow",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "8080",
              "direction": "Inbound",
              "priority": 302,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "allow-443",
            "properties": {
              "access": "Allow",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "443",
              "direction": "Inbound",
              "priority": 303,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "default-allow-ssh",
            "properties": {
              "access": "Allow",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "22",
              "direction": "Inbound",
              "priority": 300,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          }
        ]
      }
    },


    {
      "name": "[variables('towerStorageAccountName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[resourceGroup().location]",
      "comments": "This storage account is used to store the VM disks of ansible tower vm",
      "apiVersion": "2015-06-15",
      "tags": {
        "displayName": "Tower Storage Account"
      },
      "properties": {
        "accountType": "[parameters('towerStorageAccountType')]"
      }
    },
    {
      "name": "[variables('clientStorageAccountName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[resourceGroup().location]",
      "comments": "This storage account is used to store the VM disks of all client vms",
      "apiVersion": "2015-06-15",
      "tags": {
        "displayName": "Client Storage Account"
      },
      "properties": {
        "accountType": "[parameters('clientStorageAccountType')]"
      }
    },
    {
      "name": "[variables('diagStorageAccountName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[resourceGroup().location]",
      "comments": "This storage account is used for diagnostic data for all vms",
      "apiVersion": "2015-06-15",
      "tags": {
        "displayName": "Diagnostics Storage Account"
      },
      "properties": {
        "accountType": "Standard_LRS"
      }
    },
    {
      "name": "[variables('ansibleVnetName')]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[resourceGroup().location]",
      "comments": "This Virtual Network contains all the VMs needed",
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('ansibleNsgName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('clientNsgName'))]"
      ],
      "tags": {
        "displayName": "Ansible-Virtual Network"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('ansibleVnetPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('ansibleVnetTowerSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('ansibleVnetTowerSubnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('ansibleNsgName'))]"
              }
            }
          },
          {
            "name": "[variables('ansibleVnetClientSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('ansibleVnetClientSubnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('clientNsgName'))]"
              }
            }
          }
        ]
      }
    },

    {
      "name": "[variables('pipTowerName')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "location": "[resourceGroup().location]",
      "comments": "This Public IP is used by the Ansible Tower installed VM",
      "apiVersion": "2015-06-15",
      "tags": {
        "displayName": "Public IP Address -Tower VM"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[variables('pipTowerDnsName')]"
        }
      }
    },
    {
      "name": "[variables('pipClient01Name')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "location": "[resourceGroup().location]",
      "comments": "This Public IP is used by the Client VM 01",
      "apiVersion": "2015-06-15",
      "tags": {
        "displayName": "Public IP Address -Client VM-01"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[variables('pipClient01DnsName')]"
        }
      }
    },

    {
      "name": "[variables('pipClient02Name')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "location": "[resourceGroup().location]",
      "comments": "This Public IP is used by the Client VM 02",
      "apiVersion": "2015-06-15",
      "tags": {
        "displayName": "Public IP Address -Client VM-02"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[variables('pipClient02DnsName')]"
        }
      }
    },

    {
      "name": "[variables('vmClient01NicName')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[resourceGroup().location]",
      "comments": "These NIC will be used by Client VM 01",
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('ansibleVnetName'))]",
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('pipClient01Name'))]"
      ],
      "tags": {
        "displayName": "NIC Client VM-01"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "10.0.1.21",
              "subnet": {
                "id": "[variables('clientSubnetRef')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('pipClient01Name'))]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[variables('vmClient02NicName')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[resourceGroup().location]",
      "comments": "These NIC will be used by Client VM 02",
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('ansibleVnetName'))]",
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('pipClient02Name'))]"
      ],
      "tags": {
        "displayName": "NIC Client VM-02"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "10.0.1.22",
              "subnet": {
                "id": "[variables('clientSubnetRef')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('pipClient02Name'))]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[variables('vmClient01Name')]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[resourceGroup().location]",
      "comments": "This VM will be used as Ansible Client VM",
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('clientStorageAccountName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', variables('vmClient01NicName'))]",
        "[resourceId('Microsoft.Compute/availabilitySets', variables('clientAvSet'))]"
      ],
      "tags": {
        "displayName": "VM-Client-01"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('clientAvSet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('clientVmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmClient01Name')]",
          "adminUsername": "[parameters('vmClientUsername')]",
          "adminPassword": "[parameters('vmClientPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "RedHat",
            "offer": "RHEL",
            "sku": "7.2",
            "version": "latest"
          },
          "osDisk": {
            "name": "[variables('vmClient01OsDiskName')]",
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('clientStorageAccountName')), '2015-06-15').primaryEndpoints.blob, variables('storageAccountContainerName'),'/',variables('vmClient01OsDiskName'),'.vhd')]"

            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('vmClient01NicName'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('diagStorageAccountName')),'2015-06-15').primaryEndpoints.blob]"
          }
        }
      }
    },
    {
      "name": "[variables('vmClient02Name')]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[resourceGroup().location]",
      "comments": "This VM will be used as Ansible Client VM",
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('clientStorageAccountName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', variables('vmClient02NicName'))]",
        "[resourceId('Microsoft.Compute/availabilitySets', variables('clientAvSet'))]"
      ],
      "tags": {
        "displayName": "VM-Client-02"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('clientAvSet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('clientVmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmClient02Name')]",
          "adminUsername": "[parameters('vmClientUsername')]",
          "adminPassword": "[parameters('vmClientPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "RedHat",
            "offer": "RHEL",
            "sku": "7.2",
            "version": "latest"
          },
          "osDisk": {
            "name": "[variables('vmClient02OsDiskName')]",
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('clientStorageAccountName')), '2015-06-15').primaryEndpoints.blob, variables('storageAccountContainerName'),'/',variables('vmClient02OsDiskName'),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('vmClient02NicName'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('diagStorageAccountName')),'2015-06-15').primaryEndpoints.blob]"
          }
        }
      }
    },
    {
      "name": "[variables('vmAnsibleTowerNicName')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[resourceGroup().location]",
      "comments": "These NIC will be used by Ansible Tower VM",
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('ansibleVnetName'))]",
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('pipTowerName'))]"
      ],
      "tags": {
        "displayName": "NIC Tower VM"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('towerSubnetRef')]"

              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('pipTowerName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[variables('vmTowerName')]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[resourceGroup().location]",
      "comments": "This VM will be used as Ansible Tower VM",
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('towerStorageAccountName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', variables('vmAnsibleTowerNicName'))]",
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmClient01Name'))]",
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmClient02Name'))]",
        "[resourceId('Microsoft.Compute/availabilitySets', variables('towerAvSet'))]"
      ],
      "tags": {
        "displayName": "VM-AnsibleTower"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('towerAvSet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('ansibleTowerVmSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('vmAnsibleTowerNicName'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('diagStorageAccountName')),'2015-06-15').primaryEndpoints.blob]"
          }
        },
        "osProfile": {
          "computerName": "[variables('vmTowerName')]",
          "adminUsername": "[parameters('vmAnsibleTowerUsername')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshKeyData')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "RedHat",
            "offer": "RHEL",
            "sku": "7.2",
            "version": "latest"
          },
          "osDisk": {
            "name": "[variables('vmAnsibleTowerOsDiskName')]",
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('towerStorageAccountName')), '2015-06-15').primaryEndpoints.blob, variables('storageAccountContainerName'),'/',variables('vmAnsibleTowerOsDiskName'),'.vhd')]"

            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        }
      },
      "resources": [
        {
          "apiVersion": "2015-06-15",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', variables('vmTowerName'))]"
          ],
          "location": "[resourceGroup().location]",
          "name": "ansible-tower-extension",
          "comments": "These VM Extensions are used to setup ansible tower on the VM",
          "properties": {
            "publisher": "Microsoft.OSTCExtensions",
            "type": "CustomScriptForLinux",
            "typeHandlerVersion": "1.4",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": [
                "[concat(parameters('_artifactlocation'),'scripts/', variables('scriptFileName'),parameters('_artifactsLocationSasToken'))]"
              ]
            },
            "protectedSettings": {
              "commandToExecute": "[concat(variables('customScriptCommand'), parameters('ansibleTowerAdminPassword'),variables('scriptSpace'),parameters('ansibleTowerDatabasePassword'),variables('scriptSpace'),parameters('vmClientUsername'),variables('scriptSpace'),parameters('vmClientPassword'),variables('scriptSpace'),reference(variables('vmClient01NicName')).ipConfigurations[ 0 ].properties.privateIPAddress,variables('scriptSpace'),reference(variables('vmClient02NicName')).ipConfigurations[ 0 ].properties.privateIPAddress, variables('scriptClose'))]"
            }
          },
          "tags": {
            "displayName": "CustomInstallTower"
          },
          "type": "extensions"
        }
      ]
    }
  ],
  "outputs": {
    "ansibleTowerIp": {
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses',variables('pipTowerName'))).ipAddress]",
      "type": "string"
    },
    "ansibleTowerFqdn": {
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses',variables('pipTowerName'))).dnsSettings.fqdn]",
      "type": "string"
    },
    "client01Ip": {
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses',variables('pipClient01Name'))).ipAddress]",
      "type": "string"
    },
    "client01PrivateIP": {
      "value": "[reference(variables('vmClient01NicName')).ipConfigurations[ 0 ].properties.privateIPAddress]",
      "type": "string"
    },
    "client01Fqdn": {
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses',variables('pipClient01Name'))).dnsSettings.fqdn]",
      "type": "string"
    },
    "client02Ip": {
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses',variables('pipClient02Name'))).ipAddress]",
      "type": "string"
    },
    "client02PrivateIP": {
      "value": "[reference(variables('vmClient02NicName')).ipConfigurations[ 0 ].properties.privateIPAddress]",
      "type": "string"
    },
    "client02Fqdn": {
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses',variables('pipClient02Name'))).dnsSettings.fqdn]",
      "type": "string"
    }
  }
}


