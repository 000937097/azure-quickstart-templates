{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "publisherEmail": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The email address of the owner of the service"
      }
    },
    "publisherName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The name of the owner of the service"
      }
    },
    "sku": {
      "type": "string",
      "allowedValues": [
        "Basic",
        "Consumption",
        "Developer",
        "Standard",
        "Premium"
      ],
      "defaultValue": "Developer",
      "metadata": {
        "description": "The pricing tier of this API Management service"
      }
    },
    "skuCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "The instance size of this API Management service."
      }
    },
    "addressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "Address prefix for the Virtual Network"
      }
    },
    "subnetPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/28",
      "metadata": {
        "description": "Subnet prefix"
      }
    },
    "Secrets": {
      "type": "array",
      "metadata": {
        "description": "An array of json objects like this : {'name':name, 'value':value}"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": "[concat('kv-', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the KeyVault to provision"
      }
    },
    "identityName": {
      "type": "string",
      "defaultValue": "[concat('id-', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the user assigned identity"
      }
    },
    "gatewayCustomHostname": {
      "type": "string",
      "metadata": {
        "description": "Name of the gateway custom hostname"
      }
    }
  },
  "variables": {
    "apiManagementServiceName": "[concat('apim-', uniqueString(resourceGroup().id))]",
    "virtualNetworkName": "apim-vnet",
    "subnetName": "apim",
    "identityID": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "name": "[parameters('identityName')]",
      "apiVersion": "2018-11-30",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2019-09-01",
      "name": "[parameters('keyVaultName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName'))]"
      ],
      "properties": {
        "sku": {
          "name": "standard",
          "family": "A"
        },
        "tenantId": "[reference(variables('identityID')).tenantId]",
        "accessPolicies": [
          {
            "tenantId": "[reference(variables('identityID')).tenantId]",
            "objectId": "[reference(variables('identityID')).principalId]",
            "permissions": {
              "secrets": [
                "get"
              ]
            }
          }
        ],
        "enableSoftDelete": true
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2019-09-01",
      "name": "[concat(parameters('keyVaultName'), '/', parameters('Secrets')[copyIndex()].name)]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ],
      "copy": {
        "name": "secretcopy",
        "count": "[length(parameters('Secrets'))]"
      },
      "properties": {
        "value": "[parameters('Secrets')[copyIndex()].value]",
        "recoveryLevel": "Purgeable",
        "contentType": "application/x-pkcs12",
        "attributes": {
          "enabled": true,
          "nbf": 1593668778,
          "exp": 1726827178
        }
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-05-01",
      "name": "[variables('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[parameters('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2020-06-01-preview",
      "type": "Microsoft.ApiManagement/service",
      "name": "[variables('apiManagementServiceName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ],
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[variables('identityID')]": {
          }
        }
      },
      "sku": {
        "name": "[parameters('sku')]",
        "capacity": "[parameters('skuCount')]"
      },
      "properties": {
        "hostnameConfigurations": [
          {
            "type": "Proxy",
            "hostName": "[parameters('gatewayCustomHostname')]",
            "keyVaultId": "[concat(reference(parameters('keyVaultName')).vaultUri,'secrets/sslcert')]",
            "identityClientId": "[reference(variables('identityID')).clientId]",
            "defaultSslBinding": true
          }
        ],
        "publisherEmail": "[parameters('publisherEmail')]",
        "publisherName": "[parameters('publisherName')]",
        "virtualNetworkType": "External",
        "virtualNetworkConfiguration": {
          "subnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]"
        },
        "customProperties": {
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA": false,
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA": false,
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_GCM_SHA256": false,
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_256_CBC_SHA256": false,
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_CBC_SHA256": false,
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_256_CBC_SHA": false,
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_CBC_SHA": false,
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168": false,
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10": false,
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11": false,
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30": false,
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": false,
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": false,
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": false,
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2": false,
        },
      }
    }
  ]
}
