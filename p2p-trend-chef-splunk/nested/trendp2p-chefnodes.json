{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": ""
    },
    "location2": {
      "type": "string",
      "defaultValue": ""
    },
    "network-api-version": {
      "type": "string",
      "defaultValue": ""
    },
    "compute-api-version": {
      "type": "string",
      "defaultValue": ""
    },
    "deployment-api-version2": {
      "type": "string",
      "defaultValue": ""
    },
    "automation-api-version": {
      "type": "string",
      "defaultValue": ""
    },
    "automation-api-version2": {
      "type": "string",
      "defaultValue": ""
    },
    "adminUsernameChefWorkstation": {
      "type": "string",
      "defaultValue": ""
    },
    "adminPasswordChefWorkstation": {
      "type": "securestring",
      "defaultValue": ""
    },
    "publicIPDomainNameLabelChefWorkstation": {
      "type": "string",
      "defaultValue": ""
    },
    "publicIPDomainNameLabelDSAgentWindows": {
      "type": "string",
      "defaultValue": ""
    },
    "windowsOSVersion": {
      "type": "string",
      "defaultValue": ""
    },
    "adminUsernameDSAgent": {
      "type": "string",
      "defaultValue": ""
    },
    "adminPasswordDSAgent": {
      "type": "securestring",
      "defaultValue": ""
    },
    "publicIPDomainNameLabelDSAgent": {
      "type": "string",
      "defaultValue": ""
    },
    "ubuntuOSVersion": {
      "type": "string",
      "defaultValue": ""
    },
    "linuxvmcount": {
      "type": "int",
      "defaultValue": ""
    },
    "windowsvmcount": {
      "type": "int",
      "defaultValue": ""
    },
    "ManagerAddress": {
      "type": "string",
      "defaultValue": ""
    },
    "subnet4Ref": {
      "type": "string",
      "defaultValue": ""
    },
    "vmNameChefWorkstation": {
      "type": "string",
      "defaultValue": ""
    },
    "vmSizeChefWorkstation": {
      "type": "string",
      "defaultValue": ""
    },
    "vmNameDSAWindows": {
      "type": "string",
      "defaultValue": ""
    },
    "vmSizeDSAWindows": {
      "type": "string",
      "defaultValue": ""
    },
    "vmNameDSAgent": {
      "type": "string",
      "defaultValue": ""
    },
    "vmSizeDSAgent": {
      "type": "string",
      "defaultValue": ""
    },
    "imagePublisherWindows": {
      "type": "string",
      "defaultValue": ""
    },
    "imageOfferWindows": {
      "type": "string",
      "defaultValue": ""
    },
    "imagePublisherLinux": {
      "type": "string",
      "defaultValue": ""
    },
    "imageOfferLinux": {
      "type": "string",
      "defaultValue": ""
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": ""
    },
    "vmStorageAccountContainerName": {
      "type": "string",
      "defaultValue": ""
    },
    "ActivationPort": {
      "type": "string",
      "defaultValue": ""
    },
    "TenantIdentifier": {
      "type": "string",
      "defaultValue": ""
    },
    "TenantActivationPassword": {
      "type": "string",
      "defaultValue": ""
    },
    "adminUsernameDSAgentWindows": {
      "type": "string",
      "defaultValue": ""
    },
    "adminPasswordDSAgentWindows": {
      "type": "securestring",
      "defaultValue": ""
    },
    "tagvalues": {
      "type": "object",
      "defaultValue": ""
    },
    "chefprefix": {
      "type": "string",
      "defaultValue": ""
    },
    "accountName": {
      "defaultValue": "",
      "type": "string"
    },
    "automationScriptUri": {
      "defaultValue": "",
      "type": "string"
    },
    "credentialName": {
      "type": "string",
      "defaultValue": ""
    },
    "automationUserName": {
      "type": "string",
      "defaultValue": ""
    },
    "automationUserPassword": {
      "type": "securestring",
      "defaultValue": ""
    },
    "automationVariableName": {
      "defaultValue": "",
      "type": "string"
    },
    "jobId": {
      "defaultValue": "",
      "type": "string"
    },
    "keyName": {
      "defaultValue": "",
      "type": "string"
    },
    "kmServerUrl": {
      "defaultValue": "",
      "type": "string"
    },
    "automationtemplatelink": {
      "defaultValue": "",
      "type": "string"
    },
    "chef_node_name": {
      "type": "string",
      "defaultValue": ""
    },
    "chef_server_url": {
      "type": "string",
      "defaultValue": ""
    },
    "validation_client_name": {
      "type": "string",
      "defaultValue": ""
    },
    "validation_key_format": {
      "type": "string",
      "defaultValue": ""
    },
    "runlist": {
      "type": "string",
      "defaultValue": ""
    },
    "resourcegroupName": {
      "type": "string",
      "defaultValue": ""
    }
  },
  "variables": {
    "publicIPAddressNameChefWorkstation": "publicIPChefWorkstation",
    "networkInterfaceNameChefWorkstation": "[concat(parameters('vmNameChefWorkstation'),'-nic')]",
    "securityGroupNameChefWorkstation": "[concat(variables('networkInterfaceNameChefWorkstation'),'-nsg')]",
    "publicIPAddressNameDSAWindows": "publicipdsawindows",
    "networkInterfaceNameDSAWindows": "[concat(parameters('vmNameDSAWindows'),'-nic')]",
    "securityGroupNameDSAWindows": "[concat(variables('networkInterfaceNameDSAWindows'),'-nsg')]",
    "publicIPAddressNameDSAgent": "publicipdsalinux",
    "networkInterfaceNameDSAgent": "[concat(parameters('vmNameDSAgent'),'-nic')]",
    "securityGroupNameDSAgent": "[concat(variables('networkInterfaceNameDSAgent'),'-nsg')]",
    "automationSku": "Free",
    "runbookName": "Get-KeyValue",
    "runbookDescription": "Retrieves chef validator key from microservice",
    "vmExtensionName": "ChefnodeExtension"
  },
  "resources": [
    {
      "type": "Microsoft.Automation/automationAccounts",
      "name": "[parameters('accountName')]",
      "apiVersion": "[parameters('automation-api-version')]",
      "location": "[parameters('location2')]",
      "tags": {},
      "properties": {
        "sku": {
          "name": "[variables('automationSku')]"
        }
      },
      "resources": [
        {
          "name": "[variables('runbookName')]",
          "type": "runbooks",
          "apiVersion": "[parameters('automation-api-version')]",
          "location": "[parameters('location2')]",
          "dependsOn": [
            "[concat('Microsoft.Automation/automationAccounts/', parameters('accountName'))]"
          ],
          "tags": {
            "program": "[parameters('tagvalues').program]",
            "project": "[parameters('tagvalues').project]"
          },
          "properties": {
            "runbookType": "Script",
            "logProgress": "false",
            "logVerbose": "false",
            "description": "[variables('runbookDescription')]",
            "publishContentLink": {
              "uri": "[parameters('automationScriptUri')]",
              "version": "1.0.0.0"
            }
          }
        },
        {
          "name": "[parameters('credentialName')]",
          "type": "credentials",
          "apiVersion": "[parameters('automation-api-version')]",
          "location": "[parameters('location2')]",
          "dependsOn": [
            "[concat('Microsoft.Automation/automationAccounts/', parameters('accountName'))]"
          ],
          "tags": {
            "program": "[parameters('tagvalues').program]",
            "project": "[parameters('tagvalues').project]"
          },
          "properties": {
            "userName": "[parameters('automationUserName')]",
            "password": "[parameters('automationUserPassword')]"
          }
        },
        {
          "name": "[concat(parameters('accountName'), '/', parameters('automationVariableName'))]",
          "type": "Microsoft.Automation/automationAccounts/variables",
          "apiVersion": "[parameters('automation-api-version2')]",
          "location": "[parameters('location2')]",
          "dependsOn": [
            "[concat('Microsoft.Automation/automationAccounts/', parameters('accountName'))]"
          ],
          "properties": {
            "variable": {
              "name": "[parameters('automationVariableName')]",
              "type": "string",
              "value": "",
              "Encrypted": false
            }
          }
        },
        {
          "name": "[concat(parameters('accountName'), '/', parameters('jobId'))]",
          "type": "Microsoft.Automation/automationAccounts/jobs",
          "apiVersion": "[parameters('automation-api-version2')]",
          "location": "[parameters('location2')]",
          "tags": {
            "key": "value"
          },
          "properties": {
            "runbook": {
              "name": "[variables('runbookName')]"
            },
            "parameters": {
              "accountName": "[parameters('accountName')]",
              "variableName": "[parameters('automationVariableName')]",
              "credentialName": "[parameters('credentialName')]",
              "resourceGroupName": "[parameters('resourcegroupName')]",
              "keyName": "[parameters('keyName')]",
              "kmServerUrl": "[parameters('kmServerUrl')]"
            }
          },
          "dependsOn": [
            "[concat('Microsoft.Automation/automationAccounts/', parameters('accountName'))]",
            "[resourceId('Microsoft.Automation/automationAccounts/variables', parameters('accountName'), parameters('automationVariableName'))]",
            "[concat('Microsoft.Automation/automationAccounts/', parameters('accountName'), '/runbooks/',variables('runbookName'))]"
          ]
        },
        {
          "name": "variableOutputNestedTemplate",
          "apiVersion": "[parameters('deployment-api-version2')]",
          "type": "Microsoft.Resources/deployments",
          "properties": {
            "mode": "incremental",
            "templatelink": {
              "uri": "[parameters('automationtemplatelink')]",
              "contentVersion": "1.0"
            },
            "parameters": {
              "accountName": {
                "value": "[parameters('accountName')]"
              },
              "variableName": {
                "value": "[parameters('automationVariableName')]"
              }
            }
          },
          "dependsOn": [
            "[concat('Microsoft.Automation/automationAccounts/', parameters('accountName'))]",
            "[resourceId('Microsoft.Automation/automationAccounts/jobs', parameters('accountName'), parameters('jobId'))]"
          ]
        }
      ]
    },
    {
      "apiVersion": "[parameters('network-api-version')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(parameters('chefprefix'),variables('publicIPAddressNameChefWorkstation'))]",
      "location": "[parameters('location')]",
      "tags": {
        "program": "[parameters('tagvalues').program]",
        "project": "[parameters('tagvalues').project]"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('chefprefix'),parameters('publicIPDomainNameLabelChefWorkstation'))]"
        }
      }
    },
    {
      "apiVersion": "[parameters('network-api-version')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('chefprefix'),variables('networkInterfaceNameChefWorkstation'))]",
      "location": "[parameters('location')]",
      "tags": {
        "program": "[parameters('tagvalues').program]",
        "project": "[parameters('tagvalues').project]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/',parameters('chefprefix'),variables('publicIPAddressNameChefWorkstation'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(parameters('chefprefix'),variables('publicIPAddressNameChefWorkstation')))]"
              },
              "subnet": {
                "id": "[parameters('subnet4Ref')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[parameters('compute-api-version')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(parameters('chefprefix'),parameters('vmNameChefWorkstation'))]",
      "location": "[parameters('location')]",
      "tags": {
        "program": "[parameters('tagvalues').program]",
        "project": "[parameters('tagvalues').project]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', parameters('chefprefix'),variables('networkInterfaceNameChefWorkstation'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSizeChefWorkstation')]"
        },
        "osProfile": {
          "computerName": "[parameters('vmNameChefWorkstation')]",
          "adminUsername": "[parameters('adminUsernameChefWorkstation')]",
          "adminPassword": "[parameters('adminPasswordChefWorkstation')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[parameters('imagePublisherWindows')]",
            "offer": "[parameters('imageOfferWindows')]",
            "sku": "[parameters('windowsOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(parameters('chefprefix'),parameters('vmNameChefWorkstation'),'-osDisk')]",
            "vhd": {
              "uri": "[concat('https://',parameters('storageAccountName'),'.blob.core.windows.net/',parameters('vmStorageAccountContainerName'),'/',parameters('chefprefix'),parameters('vmNameChefWorkstation'),'-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(parameters('chefprefix'),variables('networkInterfaceNameChefWorkstation')))]"
            }
          ]
        }
      }
    },
    {
      "apiVersion": "[parameters('network-api-version')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(parameters('chefprefix'),variables('publicIPAddressNameDSAgent'),copyindex())]",
      "location": "[parameters('location')]",
      "tags": {
        "program": "[parameters('tagvalues').program]",
        "project": "[parameters('tagvalues').project]"
      },
      "copy": {
        "name": "foo",
        "count": "[parameters('linuxvmcount')]"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('chefprefix'),parameters('publicIPDomainNameLabelDSAgent'),copyindex())]"
        }
      }
    },
    {
      "apiVersion": "[parameters('network-api-version')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('chefprefix'),variables('networkInterfaceNameDSAgent'),copyindex())]",
      "location": "[parameters('location')]",
      "tags": {
        "program": "[parameters('tagvalues').program]",
        "project": "[parameters('tagvalues').project]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', parameters('chefprefix'),variables('publicIPAddressNameDSAgent'),copyindex())]"
      ],
      "copy": {
        "name": "foo",
        "count": "[parameters('linuxvmcount')]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('chefprefix'),variables('publicIPAddressNameDSAgent'),copyindex()))]"
              },
              "subnet": {
                "id": "[parameters('subnet4Ref')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[parameters('compute-api-version')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(parameters('chefprefix'),parameters('vmNameDSAgent'),copyindex())]",
      "location": "[parameters('location')]",
      "tags": {
        "program": "[parameters('tagvalues').program]",
        "project": "[parameters('tagvalues').project]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', parameters('chefprefix'),variables('networkInterfaceNameDSAgent'),copyindex())]"
      ],
      "copy": {
        "name": "foo",
        "count": "[parameters('linuxvmcount')]"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSizeDSAgent')]"
        },
        "osProfile": {
          "computerName": "[parameters('vmNameDSAgent')]",
          "adminUsername": "[parameters('adminUsernameDSAgent')]",
          "adminPassword": "[parameters('adminPasswordDSAgent')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[parameters('imagePublisherLinux')]",
            "offer": "[parameters('imageOfferLinux')]",
            "sku": "[parameters('ubuntuOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(parameters('chefprefix'),parameters('vmNameDSAgent'),copyindex(),'-osDisk')]",
            "vhd": {
              "uri": "[concat('https://',parameters('storageAccountName'),'.blob.core.windows.net/',parameters('vmStorageAccountContainerName'),'/',parameters('chefprefix'),parameters('vmNameDSAgent'),copyindex(),'-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(parameters('chefprefix'),variables('networkInterfaceNameDSAgent'),copyindex()))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('chefprefix'),parameters('vmNameDSAgent'),copyIndex(),'/', variables('vmExtensionName'))]",
      "apiVersion": "[parameters('compute-api-version')]",
      "location": "[parameters('location')]",
      "tags": {
        "program": "[parameters('tagvalues').program]",
        "project": "[parameters('tagvalues').project]"
      },
      "copy": {
        "name": "foo",
        "count": "[parameters('linuxvmcount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('chefprefix'),parameters('vmNameDSAgent'),copyindex())]",
        "['Microsoft.Resources/deployments/variableOutputNestedTemplate']"
      ],
      "properties": {
        "publisher": "Chef.Bootstrap.WindowsAzure",
        "type": "LinuxChefClient",
        "typeHandlerVersion": "1210.12",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "bootstrap_options": {
            "chef_node_name": "[concat(parameters('chef_node_name'),copyIndex())]",
            "chef_server_url": "[parameters('chef_server_url')]",
            "validation_client_name": "[parameters('validation_client_name')]"
          },
          "validation_key_format": "[parameters('validation_key_format')]",
          "runlist": "[parameters('runlist')]",
          "client_rb": "ssl_verify_mode    :verify_none"
        },
        "protectedSettings": {
          "validation_key": "[substring(string(skip(take(split(string(reference('variableOutputNestedTemplate').outputs.exampleOutput.value),'\"'),4),3)),2,sub(length(string(skip(take(split(string(reference('variableOutputNestedTemplate').outputs.exampleOutput.value),'\"'),4),3))),4))]"
        }
      }
    }
  ],
  "outputs": {
    "keyoutput": {
      "type": "string",
      "value": "[substring(string(skip(take(split(string(reference('variableOutputNestedTemplate').outputs.exampleOutput.value),'\"'),4),3)),2,sub(length(string(skip(take(split(string(reference('variableOutputNestedTemplate').outputs.exampleOutput.value),'\"'),4),3))),4))]"
    }
  }
}