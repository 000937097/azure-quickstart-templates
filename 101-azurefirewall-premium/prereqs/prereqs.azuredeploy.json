{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_B2s",
            "metadata": {
                "description": "Size of virtual machine sizes"
            }
        },
        "remoteAccessUsername": {
            "type": "string",
            "defaultValue": "AzureUser",
            "metadata": {
                "description": "Username for remote access"
            }
        },
        "remoteAccessPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for remote access"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Deployment location"
            }
        }
    },
    "variables": {
        "vnetAddressSpace": "10.0.0.0/16",
        "serverAddressSpace": "10.0.10.0/24",
        "serverPrivateIPAddress": "10.0.10.10",
        "bastionAddressSpace": "10.0.20.0/24",
        "keyVaultName": "[concat('fw-demo-', uniqueString(resourceGroup().id))]",
        "keyVaultCASecretName": "CACert"
    },
    "resources": [
        {
            "apiVersion": "2020-10-01",
            "type": "Microsoft.Resources/deploymentScripts",
            "name": "CreateAndDeployCertificates",
            "location": "[resourceGroup().location]",
            "kind": "AzurePowerShell",
            "properties": {
                "forceUpdateTag": "2",
                "azPowerShellVersion": "3.0",
                "scriptContent": "
# Write the config to file
$opensslConfig=@'
[ req ]
default_bits        = 4096
distinguished_name  = req_distinguished_name
string_mask         = utf8only
default_md          = sha512

[ req_distinguished_name ]
countryName                     = Country Name (2 letter code)
stateOrProvinceName             = State or Province Name
localityName                    = Locality Name
0.organizationName              = Organization Name
organizationalUnitName          = Organizational Unit Name
commonName                      = Common Name
emailAddress                    = Email Address

[ rootCA_ext ]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ interCA_ext ]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true, pathlen:1
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ server_ext ]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:false
keyUsage = critical, digitalSignature
extendedKeyUsage = serverAuth
'@

Set-Content -Path openssl.cnf -Value $opensslConfig

# Create root CA
openssl req -x509 -new -nodes -newkey rsa:4096 -keyout rootCA.key -sha256 -days 3650 -out rootCA.crt -subj '/C=US/ST=US/O=Self Signed/CN=Self Signed Root CA' -config openssl.cnf -extensions rootCA_ext

# Create intermediate CA request
openssl req -new -nodes -newkey rsa:4096 -keyout interCA.key -sha256 -out interCA.csr -subj '/C=US/ST=US/O=Self Signed/CN=Self Signed Intermediate CA'

# Sign on the intermediate CA
openssl x509 -req -in interCA.csr -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -out interCA.crt -days 3650 -sha256 -extfile openssl.cnf -extensions interCA_ext

# Export the intermediate CA into PFX
openssl pkcs12 -export -out interCA.pfx -inkey interCA.key -in interCA.crt -password 'pass:'

# Convert the PFX and public key into base64
$interCa = [Convert]::ToBase64String((Get-Content -Path interCA.pfx -AsByteStream -Raw))
$rootCa = [Convert]::ToBase64String((Get-Content -Path rootCA.crt -AsByteStream -Raw))

# Assign outputs
$DeploymentScriptOutputs = @{}
$DeploymentScriptOutputs['interca'] = $interCa
$DeploymentScriptOutputs['rootca'] = $rootCa
                ",
                "timeout": "PT5M",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D"
            }
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "name": "DemoIdentity",
            "apiVersion": "2018-11-30",
            "location": "[parameters('location')]"
        },
        {
            "apiVersion": "2019-09-01",
            "type": "Microsoft.KeyVault/vaults",
            "name": "[variables('keyVaultName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'DemoIdentity')]"
            ],
            "properties": {
                "enabledForDeployment": true,
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": true,
                "tenantId": "[subscription().tenantId]",
                "accessPolicies": [
                    {
                        "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'DemoIdentity'), '2018-11-30').principalId]",
                        "tenantId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'DemoIdentity'), '2018-11-30').tenantId]",
                        "permissions": {
                            "secrets": [
                                "get",
                                "list"
                            ]
                        }
                    }
                ],
                "sku": {
                    "name": "Standard",
                    "family": "A"
                }
            }
        },
        {
            "apiVersion": "2020-07-01",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "DemoVnet",
            "location": "[parameters('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('vnetAddressSpace')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "ServerSubnet",
                        "properties": {
                            "addressPrefix": "[variables('serverAddressSpace')]"
                        }
                    },
                    {
                        "name": "AzureBastionSubnet",
                        "properties": {
                            "addressPrefix": "[variables('bastionAddressSpace')]"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2020-07-01",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "ServerNIC",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', 'DemoVnet')]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ServerIPConfiguration",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', 'DemoVnet', 'ServerSubnet')]"
                            },
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[variables('serverPrivateIPAddress')]"
                        }
                    }
                ]
            }
        },
        {
            "name": "ServerVM",
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2020-06-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', 'ServerNIC')]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "MicrosoftWindowsDesktop",
                        "offer": "Windows-10",
                        "sku": "20h1-pro",
                        "version": "latest"
                    },
                    "osDisk": {
                        "createOption": "FromImage"
                    }
                },
                "osProfile": {
                    "computerName": "ServerVM",
                    "adminUsername": "[parameters('remoteAccessUsername')]",
                    "adminPassword": "[parameters('remoteAccessPassword')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', 'ServerNIC')]"
                        }
                    ]
                }
            }
        },
        {
            "name": "ServerVM/Bootstrap",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2020-06-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', 'ServerVM')]"
            ],
            "properties": {
                "publisher": "Microsoft.Compute",
                "type": "CustomScriptExtension",
                "typeHandlerVersion": "1.7",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "commandToExecute": "[concat('echo ', reference('CreateAndDeployCertificates').outputs.rootca, ' > c:\\root.pem.base64 && powershell \"Set-Content -Path c:\\root.pem -Value ([Text.Encoding]::UTF8.GetString([convert]::FromBase64String((Get-Content -Path c:\\root.pem.base64))))\" && certutil -addstore root c:\\root.pem')]"
                }
            }
        },
        {
            "apiVersion": "2019-09-01",
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/', variables('keyVaultCASecretName'))]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "properties": {
                "value": "[reference('CreateAndDeployCertificates').outputs.interca]"
            }
        },
        {
            "apiVersion": "2020-07-01",
            "type": "Microsoft.Network/publicIpAddresses",
            "name": "BastionPublicIP",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            }
        },
        {
            "apiVersion": "2020-07-01",
            "type": "Microsoft.Network/bastionHosts",
            "name": "DemoBastion",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIpAddresses', 'BastionPublicIP')]",
                "[resourceId('Microsoft.Network/virtualNetworks', 'DemoVnet')]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "BastionIpConfiguration",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', 'DemoVnet', 'AzureBastionSubnet')]"
                            },
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIpAddresses', 'BastionPublicIP')]"
                            }
                        }
                    }
                ]
            }
        }
    ]
}