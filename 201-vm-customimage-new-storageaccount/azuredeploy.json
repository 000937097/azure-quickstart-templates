{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "TransferVmName": {
      "type": "string",
      "defaultValue": "TransferVM",
      "minLength": 3,
      "maxLength": 15,
      "metadata": {
        "description": "Name of the Windows VM that will perform the copy of the VHD from a source storage account to the new storage account created in the new deployement, this is known as transfer vm."
      }
    },
    "NewVmName": {
      "type": "string",
      "defaultValue": "NewVM",
      "minLength": 3,
      "maxLength": 15,
      "metadata": {
        "description": "Name of the new VM deployed from the custom image."
      }
    },
    "CustomImageName": {
      "type": "string",
      "defaultValue": "images/Win10MasterImage-osDisk.72451a98-4c26-4375-90c5-0a940dd56bab.vhd",
      "metadata": {
        "description": "Name of the VHD to be used as source syspreped/generalized image to deploy the VM. E.g. mybaseimage.vhd."
      }
    },
    "AdminUserName": {
      "type": "string",
      "defaultValue": "vadmin",
      "minLength": 1,
      "metadata": {
        "description": "Name of the local administrator account, this cannot be Admin or Administrator or root if Linux VM."
      }
    },
    "AdminPassword": {
      "type": "securestring",
      "minLength": 8,
      "metadata": {
        "description": "Local administrator password, complex password is required, do not use any variation of the password word because it will be rejected."
      }
    },
    "sourceStorageAccountKey": {
      "type": "string",
      "metadata": {
        "description": "Key of the storage account that contains the custom image."
      }
    },
    "sourceImages": {
      "type": "string",
      "defaultValue": "https://jumpvmrg7942.blob.core.windows.net/vhds/CustomMasterImage-osDisk.72451a98-4c26-4375-90c5-0a940dd56bab.vhd,https://jumpvmrg7942.blob.core.windows.net/vhds/CustomDisk01.vhd",
      "metadata": {
        "description": "Full URIs for one or more custom images (VHDs) that should be copied to the deployment storage account to spin up new VMs from them. URLs must be comma separated."
      }
    }
  },
  "variables": {
    "vmCount": 2,
    "vmNames": [
      "[parameters('transferVmName')]",
      "[parameters('newVmName')]"
    ],
    "nicNames": [
      "[concat(parameters('transferVmName'),'Nic')]",
      "[concat(parameters('newVmName'),'Nic')]"
    ],
    "storageAccountType": "Standard_LRS",
    "storageAccountName": "[concat('storageacct',uniquestring(resourceGroup().id))]",
    "virtualNetworkName": "vNet",
    "vnetPrefix": "10.0.0.0/16",
    "vnetSubnetName1": "LabSubnet",
    "vnetSubnetPrefix1": "10.0.0.0/24",
    "VnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('VirtualNetworkName'))]",
    "SubnetRef": "[concat(variables('VnetID'), '/subnets/', variables('vnetSubnetName1'))]",
    "projectName": "201-vm-customimage-new-storageaccount",
    "publicIpNames": [
      "[concat(parameters('transferVmName'),'PublicIP')]",
      "[concat(parameters('newVmName'),'PublicIP')]"
    ],
    "windowsOSVersion": "2012-R2-Datacenter",
    "imagePublisher": "MicrosoftWindowsServer",
    "imageOffer": "WindowsServer",
    "osDiskName": "OSDisk",
    "VmSizes": [
      "Standard_D1",
      "Standard_D1"
    ],
    "vhdStorageAccountContainerName": "vhds",
    "customScriptFolder": "CustomScripts",
    "trfCustomScriptFiles": [
      "ImageTransfer.ps1"
    ]
  },
  "resources": [
    {
      "comments": "# Storage Account",
      "name": "[variables('StorageAccountName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [ ],
      "tags": {
        "displayName": "StorageAccount"
      },
      "properties": {
        "accountType": "[variables('StorageAccountType')]"
      }
    },
    {
      "comments": "# Virtual Network",
      "name": "[variables('VirtualNetworkName')]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "tags": {
        "displayName": "vnet"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('vnetSubnetName1')]",
            "properties": {
              "addressPrefix": "[variables('vnetSubnetPrefix1')]"
            }
          }
        ]
      }
    },
    {
      "comments": "# Public IP",
      "name": "[variables('publicIpNames')[copyIndex()]]",
      "type": "Microsoft.Network/publicIPAddresses",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [ ],
      "copy": {
        "count": "[variables('vmCount')]",
        "name": "pipCopy"
      },
      "tags": {
        "displayName": "[concat(variables('publicIpNames')[copyIndex()],' Public IP')]"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "comments": "# NICs",
      "name": "[variables('nicNames')[copyIndex()]]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "copy": {
        "count": "[variables('vmCount')]",
        "name": "nicCopy"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('VirtualNetworkName'))]",
        "pipCopy"
      ],
      "tags": {
        "displayName": "[concat(variables('VMNames')[copyIndex()], ' Network Interface')]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('SubnetRef')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIpNames')[copyIndex()])]"
              }
            }
          }
        ]
      }
    },
    {
      "comments": "# TRANSFER VM",
      "name": "[variables('vmNames')[0]]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-05-01-preview",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('vmNames')[0],'NIC')]"
      ],
      "tags": {
        "displayName": "[variables('vmNames')[0]]"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmSizes')[0]]"
        },
        "osProfile": {
          "computerName": "[variables('vmNames')[0]]",
          "adminUsername": "[parameters('AdminUsername')]",
          "adminPassword": "[parameters('AdminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[variables('windowsOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('vmNames')[0],'-osdisk')]",
            "vhd": {
              "uri": "[concat('http://', variables('storageAccountName'), '.blob.core.windows.net/', variables('vhdStorageAccountContainerName'), '/',variables('vmNames')[0],'-osdisk' , '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nicNames')[0]))]"
            }
          ]
        }
      },
      "resources": [
        {
          "comments": "Custom Script that copies VHDs from source storage account to destination storage account",
          "apiVersion": "2015-05-01-preview",
          "type": "extensions",
          "name": "[concat(variables('VMNames')[0],'CustomScriptExtension')]",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', variables('vmNames')[0])]"
          ],
          "properties": {
            "publisher": "Microsoft.Compute",
            "type": "CustomScriptExtension",
            "typeHandlerVersion": "1.4",
            "settings": {
              "fileUris": [
                "https://raw.githubusercontent.com/paulomarquesc/azure-quickstart-templates/201-vm-customimage-new-storageaccount/201-vm-customimage-new-storageaccount/ImageTransfer.ps1"
              ],
              "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File ','ImageTransfer.ps1 -SourceImage ',parameters('sourceImages'),' -SourceSAKey ', parameters('sourceStorageAccountKey'), ' -DestinationURI https://', variables('StorageAccountName'), '.blob.core.windows.net/vhds', ' -DestinationSAKey ', listKeys(concat('Microsoft.Storage/storageAccounts/', variables('StorageAccountName')), '2015-05-01-preview').key1 )]"
            }
          }
        }
      ]
    },
    {
      "comments": "# New Windows VM based on custom image",
      "name": "[variables('vmNames')[1]]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-05-01-preview",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('StorageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('vmNames')[1],'NIC')]",
        "[concat('Microsoft.Compute/virtualMachines/', variables('VMNames')[0],'/extensions/',variables('VMNames')[0],'CustomScriptExtension')]"
      ],
      "tags": {
        "displayName": "[variables('VMNames')[1]]"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('VmSizes')[1]]"
        },
        "osProfile": {
          "computerName": "[variables('VMNames')[1]]",
          "adminUsername": "[parameters('AdminUsername')]",
          "adminPassword": "[parameters('AdminPassword')]"
        },
        "storageProfile": {
          "osDisk": {
            "name": "[concat(variables('vmNames')[1],'-osdisk')]",
            "osType": "windows",
            "createOption": "FromImage",
            "caching": "ReadWrite",
            "image": {
              "uri": "[concat('http://', variables('StorageAccountName'), '.blob.core.windows.net/',variables('vhdStorageAccountContainerName'),'/',parameters('customImageName'))]"
            },
            "vhd": {
              "uri": "[concat('http://', variables('StorageAccountName'), '.blob.core.windows.net/',variables('vhdStorageAccountContainerName'),'/',variables('VMNames')[1],'-osdisk.vhd')]"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nicNames')[1]))]"
            }
          ]
        }
      }
    }
  ],
  "outputs": {
  }
}
