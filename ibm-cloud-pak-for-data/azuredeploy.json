{
	"$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"_artifactsLocation": {
			"type": "string",
			"metadata": {
				"description": "The base URL where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
			},
			"defaultValue": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/ibm-cloud-pak-for-data/"
		},
		"_artifactsLocationSasToken": {
			"type": "secureString",
			"metadata": {
				"description": "Token for the base URL where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
			},
			"defaultValue": ""
		},
		"bastionVmSize": {
			"type": "string",
			"defaultValue": "Standard_D8s_v3",
			"allowedValues": [
				"Standard_G1", "Standard_G2", "Standard_G3", "Standard_G4", "Standard_G5",
				"Standard_D1_v2", "Standard_DS2", "Standard_DS3", "Standard_DS4",
				"Standard_DS11", "Standard_DS12", "Standard_DS13", "Standard_DS14",
				"Standard_DS1_v2", "Standard_DS2_v2", "Standard_DS3_v2", "Standard_DS4_v2", "Standard_DS5_v2",
				"Standard_DS11_v2", "Standard_DS12_v2", "Standard_DS13_v2", "Standard_DS14_v2",
				"Standard_GS1", "Standard_GS2", "Standard_GS3", "Standard_GS4", "Standard_GS5",
				"Standard_D2s_v3", "Standard_D4s_v3", "Standard_D8s_v3", "Standard_D16s_v3", "Standard_D32s_v3", "Standard_D64s_v3",
				"Standard_E2s_v3", "Standard_E4s_v3", "Standard_E8s_v3", "Standard_E16s_v3", "Standard_E32s_v3", "Standard_E64s_v3"
			],
			"metadata": {
				"description": "Bastion Host VM size"
			}
		},
		"masterVmSize": {
			"type": "string",
			"defaultValue": "Standard_D16s_v3",
			"allowedValues": [
				"Standard_G1", "Standard_G2", "Standard_G3", "Standard_G4", "Standard_G5",
				"Standard_D1_v2", "Standard_DS2", "Standard_DS3", "Standard_DS4",
				"Standard_DS11", "Standard_DS12", "Standard_DS13", "Standard_DS14",
				"Standard_DS1_v2", "Standard_DS2_v2", "Standard_DS3_v2", "Standard_DS4_v2", "Standard_DS5_v2",
				"Standard_DS11_v2", "Standard_DS12_v2", "Standard_DS13_v2", "Standard_DS14_v2",
				"Standard_GS1", "Standard_GS2", "Standard_GS3", "Standard_GS4", "Standard_GS5",
				"Standard_D2s_v3", "Standard_D4s_v3", "Standard_D8s_v3", "Standard_D16s_v3", "Standard_D32s_v3", "Standard_D64s_v3",
				"Standard_E2s_v3", "Standard_E4s_v3", "Standard_E8s_v3", "Standard_E16s_v3", "Standard_E32s_v3", "Standard_E64s_v3"
			],
			"metadata": {
				"description": "OpenShift Master VM size"
			}
		},
		"nodeVmSize": {
			"type": "string",
			"defaultValue": "Standard_D16s_v3",
			"allowedValues": [
				"Standard_G1", "Standard_G2", "Standard_G3", "Standard_G4", "Standard_G5",
				"Standard_D1_v2", "Standard_DS2", "Standard_DS3", "Standard_DS4",
				"Standard_DS11", "Standard_DS12", "Standard_DS13", "Standard_DS14",
				"Standard_DS1_v2", "Standard_DS2_v2", "Standard_DS3_v2", "Standard_DS4_v2", "Standard_DS5_v2",
				"Standard_DS11_v2", "Standard_DS12_v2", "Standard_DS13_v2", "Standard_DS14_v2",
				"Standard_GS1", "Standard_GS2", "Standard_GS3", "Standard_GS4", "Standard_GS5",
				"Standard_D2s_v3", "Standard_D4s_v3", "Standard_D8s_v3", "Standard_D16s_v3", "Standard_D32s_v3", "Standard_D64s_v3",
				"Standard_E2s_v3", "Standard_E4s_v3", "Standard_E8s_v3", "Standard_E16s_v3", "Standard_E32s_v3", "Standard_E64s_v3"
			],
			"metadata": {
				"description": "OpenShift Node VM(s) size"
			}
		},
		"infraVmSize": {
			"type": "string",
			"defaultValue": "Standard_D16s_v3",
			"allowedValues": [
				"Standard_G1", "Standard_G2", "Standard_G3", "Standard_G4", "Standard_G5",
				"Standard_D1_v2", "Standard_DS2", "Standard_DS3", "Standard_DS4",
				"Standard_DS11", "Standard_DS12", "Standard_DS13", "Standard_DS14",
				"Standard_DS1_v2", "Standard_DS2_v2", "Standard_DS3_v2", "Standard_DS4_v2", "Standard_DS5_v2",
				"Standard_DS11_v2", "Standard_DS12_v2", "Standard_DS13_v2", "Standard_DS14_v2",
				"Standard_GS1", "Standard_GS2", "Standard_GS3", "Standard_GS4", "Standard_GS5",
				"Standard_D2s_v3", "Standard_D4s_v3", "Standard_D8s_v3", "Standard_D16s_v3", "Standard_D32s_v3", "Standard_D64s_v3",
				"Standard_E2s_v3", "Standard_E4s_v3", "Standard_E8s_v3", "Standard_E16s_v3", "Standard_E32s_v3", "Standard_E64s_v3"
			],
			"metadata": {
				"description": "OpenShift Infra Node VM(s) size"
			}
		},
		"storageKind": {
			"type": "string",
			"defaultValue": "managed",
			"allowedValues": ["managed", "unmanaged"],
			"metadata": {
				"description": "Use Managed or Unmanaged Disks"
			}
		},
		"openshiftClusterPrefix": {
			"type": "string",
			"defaultValue": "mycluster",
			"minLength": 2,
			"maxLength": 20,
			"metadata": {
				"description": "OpenShift cluster prefix.  Used to generate master, infra and node hostnames.  Maximum of 20 characters."
			}
		},
		"bastionInstanceCount": {
			"type": "int",
			"defaultValue": 1,
			"allowedValues": [1, 2, 3, 4, 5],
			"metadata": {
				"description": "Number of Bastion Hosts."
			}
		},
		"masterInstanceCount": {
			"type": "int",
			"defaultValue": 3,
			"allowedValues": [1, 3, 5],
			"metadata": {
				"description": "Number of OpenShift masters."
			}
		},
		"infraInstanceCount": {
			"type": "int",
			"defaultValue": 3,
			"allowedValues": [1, 2, 3],
			"metadata": {
				"description": "Number of OpenShift infra nodes."
			}
		},
		"nodeInstanceCount": {
			"type": "int",
			"defaultValue": 3,
			"allowedValues": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
			"metadata": {
				"description": "Number of OpenShift nodes"
			}
		},
		"dataDiskSize": {
			"type": "int",
			"defaultValue": 1024,
			"allowedValues": [32, 64, 128, 256, 512, 1024, 2048],
			"metadata": {
				"description": "Size of Datadisk in GB for Docker volume"
			}
		},
		"adminUsername": {
			"type": "string",
			"defaultValue": "clusteradmin",
			"minLength": 1,
			"metadata": {
				"description": "Administrator username on all VMs and first user created for OpenShift login"
			}
		},
		"openshiftPassword": {
			"type": "securestring",
			"minLength": 1,
			"metadata": {
				"description": "Password for OpenShift user to login to OpenShift Console"
			}
		},
		"sshPublicKey": {
			"type": "string",
			"metadata": {
				"description": "SSH public key for all VMs"
			}
		},
		"enableMetrics": {
			"type": "string",
			"defaultValue": "true",
			"allowedValues": [
				"true", "false"
			],
			"metadata": {
				"description": "Enable OpenShift Metrics: true or false"
			}
		},
		"enableLogging": {
			"type": "string",
			"defaultValue": "true",
			"allowedValues": [
				"true", "false"
			],
			"metadata": {
				"description": "Enable OpenShift Logging: true or false"
			}
		},
		"keyVaultResourceGroup": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Resource Group that contains the Key Vault"
			}
		},
		"keyVaultName": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Name of the Key Vault"
			}
		},
		"keyVaultSecret": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Key Vault Secret Name that contains the Private Key"
			}
		},
		"enableAzure": {
			"type": "string",
			"defaultValue": "true",
			"allowedValues": [
				"true", "false"
			],
			"metadata": {
				"description": "Enable Azure as Cloud Provider - true or false"
			}
		},
		"aadClientId": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Azure AD Client ID"
			}
		},
		"aadClientSecret": {
			"type": "securestring",
			"defaultValue": "",
			"metadata": {
				"description": "Azure AD Client Secret"
			}
		},
		"rhelUsername": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "RHEL Subscription Username"
			}
		},
		"rhelPassword": {
			"type": "securestring",
			"defaultValue": "",
			"metadata": {
				"description": "RHEL Subscription Password"
			}
		},
		"rhelPoolID": {
			"type": "securestring",
			"defaultValue": "",
			"metadata": {
				"description": "RHEL Subscription Pool ID"
			}
		},
		"defaultSubDomainType": {
			"type": "string",
			"defaultValue": "nipio",
			"allowedValues": [
				"nipio", "custom"
			],
			"metadata": {
				"description": "Default Subdomain type - nip.io or custom (defined in next parameter)"
			}
		},
		"defaultSubDomain": {
			"type": "string",
			"defaultValue": "contoso.com",
			"metadata": {
				"description": "Default Subdomain for application routing (Wildcard DNS) - must enter something even if you are using nip.io"
			}
		},
		"storageOption": {
			"type": "string",
			"defaultValue": "nfs",
			"allowedValues": [
				"nfs"
			],
			"metadata": {
				"description": "NFS"
			}
		},
		"singleZoneOrMultiZone": {
			"type": "string",
			"defaultValue": "single",
			"allowedValues": [
				"single", "multi"
			],
			"metadata": {
				"description": "Deploy to a Single AZ or multiple AZs"
			}
		},
		"enableBackup": {
			"type": "string",
			"defaultValue": "false",
			"allowedValues": [
				"true", "false"
			],
			"metadata": {
				"description": "Enable Backup on NFS Node"
			}
		},
		"projectName": {
			"type": "string",
			"defaultValue": "zen",
			"metadata": {
				"description": "Project name to deploy CloudPak for Data to"
			}
		},
		"installWatsonStudioLibrary": {
			"type": "string",
			"defaultValue": "yes",
			"allowedValues": [
				"yes", "no"
			],
			"metadata": {
				"description": "Install Watson Studio Library"
			}
		},
		"installWatsonMachineLearning": {
			"type": "string",
			"defaultValue": "yes",
			"allowedValues": [
				"yes", "no"
			],
			"metadata": {
				"description": "Install Watson Machine Learning"
			}
		},
		"installWatsonKnowledgeCatalog": {
			"type": "string",
			"defaultValue": "yes",
			"allowedValues": [
				"yes", "no"
			],
			"metadata": {
				"description": "Install Watson Knowledge Catalog"
			}
		},
		"installDataVirtualization": {
			"type": "string",
			"defaultValue": "yes",
			"allowedValues": [
				"yes", "no"
			],
			"metadata": {
				"description": "Install Data Virtualization"
			}
		},
		"installWatsonOpenscaleAndWatsonMachineLearning": {
			"type": "string",
			"defaultValue": "yes",
			"allowedValues": [
				"yes", "no"
			],
			"metadata": {
				"description": "Install Watson OpenScale and Watson Machine Learning"
			}
		},
		"apiKeyUsername": {
			"type": "string",
			"defaultValue": "iamapikey",
			"metadata": {
				"description": "registry entitlement key username"
			}
		},
		"apiKey": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "registry entitlement key"
			}
		},
		"cloudPakLicenseAgreement": {
			"type": "string",
			"defaultValue": "yes",
			"allowedValues": [
				"no", "yes"
			],
			"metadata": {
				"description": "Agree to license agreement in https://ibm.biz/BdqRuM. If no is selected, only the OCP cluster will be deployed"
			}
		}
	},
	"variables": {
		"apiVersionCompute": "2017-03-30",
		"apiVersionStorage": "2017-06-01",
		"location": "[resourceGroup().location]",
		"defaultSubDomain": "[toLower(parameters('defaultSubDomain'))]",
		"namingInfix": "[toLower(parameters('openshiftClusterPrefix'))]",
		"openshiftMasterHostname": "[concat(variables('namingInfix'), '-master')]",
		"bastionHostname": "[concat(variables('namingInfix'), '-bastion')]",
		"nfsHostname": "[concat(variables('namingInfix'), '-nfs')]",
		"openshiftNodeHostname": "[concat(variables('namingInfix'), '-node')]",
		"openshiftInfraHostname": "[concat(variables('namingInfix'), '-infra')]",
		"newStorageAccountMaster": "[concat('master', uniqueString(concat(resourceGroup().id, 'msa')))]",
		"newStorageAccountInfra": "[concat('infra', uniqueString(concat(resourceGroup().id, 'infra')))]",
		"newStorageAccountNodeOs": "[concat('nodeos', uniqueString(concat(resourceGroup().id, 'nodeossa')))]",
		"newStorageAccountNodeData": "[concat('nodedata', uniqueString(concat(resourceGroup().id, 'nodedatasa')))]",
		"diagStorageAccount1": "[concat('diag1', uniqueString(concat(resourceGroup().id, 'dsa1')))]",
		"diagStorageAccount2": "[concat('diag2', uniqueString(concat(resourceGroup().id, 'dsa2')))]",
		"diagStorageAccount3": "[concat('diag3', uniqueString(concat(resourceGroup().id, 'dsa3')))]",
		"diagStorageAccount4": "[concat('diag4', uniqueString(concat(resourceGroup().id, 'dsa4')))]",
		"dataStorageAccount": "[concat('data', uniqueString(concat(resourceGroup().id, 'data')))]",
		"newStorageAccountRegistry": "[concat('registry', uniqueString(concat(resourceGroup().id, 'registry')))]",
		"newStorageAccountPersistentVolume1": "[concat('pv1sa', uniqueString(concat(resourceGroup().id, 'persistentvolume1')))]",
		"newStorageAccountArray": [
			{ "name": "[variables('diagStorageAccount1')]", "tagName": "DiagnosticsStorageAccount", "skuName": "[variables('storageSkuObject').diagnostics.skuName]", "skuTier": "[variables('storageSkuObject').diagnostics.skuTier]" },
			{ "name": "[variables('diagStorageAccount2')]", "tagName": "DiagnosticsStorageAccount", "skuName": "[variables('storageSkuObject').diagnostics.skuName]", "skuTier": "[variables('storageSkuObject').diagnostics.skuTier]" },
			{ "name": "[variables('diagStorageAccount3')]", "tagName": "DiagnosticsStorageAccount", "skuName": "[variables('storageSkuObject').diagnostics.skuName]", "skuTier": "[variables('storageSkuObject').diagnostics.skuTier]" },
			{ "name": "[variables('diagStorageAccount4')]", "tagName": "DiagnosticsStorageAccount", "skuName": "[variables('storageSkuObject').diagnostics.skuName]", "skuTier": "[variables('storageSkuObject').diagnostics.skuTier]" },
			{ "name": "[variables('newStorageAccountRegistry')]", "tagName": "RegistryStorageAccount", "skuName": "[variables('storageSkuObject').registry.skuName]", "skuTier": "[variables('storageSkuObject').registry.skuTier]" },
			{ "name": "[variables('dataStorageAccount')]", "tagName": "DataStorageAccount", "skuName": "[variables('storageSkuObject').dataStorage.skuName]", "skuTier": "[variables('storageSkuObject').dataStorage.skuTier]" },
			{ "name": "[variables('newStorageAccountMaster')]", "tagName": "MasterStorageAccount", "skuName": "[variables('storageSkuObject').master.skuName]", "skuTier": "[variables('storageSkuObject').master.skuTier]" },
			{ "name": "[variables('newStorageAccountInfra')]", "tagName": "InfraStorageAccount", "skuName": "[variables('storageSkuObject').infra.skuName]", "skuTier": "[variables('storageSkuObject').infra.skuTier]" },
			{ "name": "[variables('newStorageAccountNodeOs')]", "tagName": "NodeStorageAccount", "skuName": "[variables('storageSkuObject').node.skuName]", "skuTier": "[variables('storageSkuObject').node.skuTier]" },
			{ "name": "[variables('newStorageAccountNodeData')]", "tagName": "NodeStorageAccount", "skuName": "[variables('storageSkuObject').node.skuName]", "skuTier": "[variables('storageSkuObject').node.skuTier]" },
			{ "name": "[variables('newStorageAccountPersistentVolume1')]", "tagName": "PersistentVolume1StorageAccount", "skuName": "[variables('storageSkuObject').persistent.skuName]", "skuTier": "[variables('storageSkuObject').persistent.skuTier]" }
		],
		"availabilitySetArray": [
			{ "name": "masteravailabilityset", "tagName": "MasterAvailabilitySet" },
			{ "name": "infraavailabilityset", "tagName": "InfraAvailabilitySet" },
			{ "name": "nodeavailabilityset", "tagName": "NodeAvailabilitySet" },
			{ "name": "bastionavailabilityset", "tagName": "BastionAvailabilitySet" }
		],
		"managedAvailabilitySetSku": "Aligned",
		"availabilitySetSku": "[concat(parameters('storageKind'), 'AvailabilitySetSku')]",
		"managedPlatformFaultDomainCount": 2,
		"platformFaultDomainCount": "[concat(parameters('storageKind'), 'PlatformFaultDomainCount')]",
		"nfsVmSize": "Standard_D16s_v3",
		"nfsInstanceCount": 1,
		"storageSkuObject": {
			"master": {
				"skuName": "[variables('vmSizesMap')[parameters('masterVmSize')].storageAccountType]",
				"skuTier": "[variables('vmSizesMap')[parameters('masterVmSize')].storageAccountTier]"
			},
			"infra": {
				"skuName": "[variables('vmSizesMap')[parameters('infraVmSize')].storageAccountType]",
				"skuTier": "[variables('vmSizesMap')[parameters('infraVmSize')].storageAccountTier]"
			},
			"node": {
				"skuName": "[variables('vmSizesMap')[parameters('nodeVmSize')].storageAccountType]",
				"skuTier": "[variables('vmSizesMap')[parameters('nodeVmSize')].storageAccountTier]"
			},
			"bastion": {
				"skuName": "[variables('vmSizesMap')[parameters('bastionVmSize')].storageAccountType]",
				"skuTier": "[variables('vmSizesMap')[parameters('bastionVmSize')].storageAccountTier]"
			},
			"nfs": {
				"skuName": "[variables('vmSizesMap')[variables('nfsVmSize')].storageAccountType]",
				"skuTier": "[variables('vmSizesMap')[variables('nfsVmSize')].storageAccountTier]"
			},
			"diagnostics": {
				"skuName": "Standard_LRS",
				"skuTier": "Standard"
			},
			"registry": {
				"skuName": "Standard_LRS",
				"skuTier": "Standard"
			},
			"persistent": {
				"skuName": "Standard_LRS",
				"skuTier": "Standard"
			},
			"dataStorage": {
				"skuName": "Standard_LRS",
				"skuTier": "Standard"
			}
		},
		"managedStorageCount": 6,
		"storageLoopCount": "[concat(parameters('storageKind'), 'StorageCount')]",
		"masterUri": "[concat(parameters('storageKind'), 'MasterUri')]",
		"infraUri": "[concat(parameters('storageKind'), 'InfraUri')]",
		"nodeOsUri": "[concat(parameters('storageKind'), 'NodeOsUri')]",
		"managedMasterUri": "[variables('diagStorageAccount1')]",
		"managedInfraUri": "[variables('diagStorageAccount1')]",
		"managedNodeOsUri": "[variables('diagStorageAccount1')]",
		"managedNodeDataUri": "[variables('diagStorageAccount1')]",
		"nodeDataUri": "[concat(parameters('storageKind'), 'NodeDataUri')]",
		"addressPrefix": "10.0.0.0/8",
		"masterSubnetPrefix": "10.1.0.0/16",
		"nodeSubnetPrefix": "10.2.0.0/16",
		"bastionSubnetPrefix": "10.3.0.0/27",
		"nfsSubnetPrefix": "10.4.0.0/27",
		"virtualNetworkName": "openshiftvnet",
		"masterSubnetName": "mastersubnet",
		"nodeSubnetName": "nodesubnet",
		"bastionSubnetName": "bastionsubnet",
		"nfsSubnetName": "nfssubnet",
		"bastionPublicIpDnsLabel": "[concat('bastiondns', uniqueString(concat(resourceGroup().id, 'bastion')))]",
		"infraLbPublicIpDnsLabel": "[concat('infradns', uniqueString(concat(resourceGroup().id, 'infra')))]",
		"openshiftMasterPublicIpDnsLabel": "[concat('masterdns', uniqueString(concat(resourceGroup().id, 'master')))]",
		"nfsPublicIpDnsLabel": "[concat('nfsdns', uniqueString(concat(resourceGroup().id, 'nfs')))]",

		"masterLoadBalancerName": "[concat(variables('openshiftMasterHostname'), 'lb')]",
		"masterPublicIpAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('openshiftMasterPublicIpDnsLabel'))]",
		"masterLbId": "[resourceId('Microsoft.Network/loadBalancers', variables('masterLoadBalancerName'))]",
		"masterLbFrontEndConfigId": "[concat(variables('masterLbId'), '/frontendIPConfigurations/loadBalancerFrontEnd')]",
		"masterLbBackendPoolId": "[concat(variables('masterLbId'),'/backendAddressPools/loadBalancerBackend')]",
		"masterLbHttpsProbeId": "[concat(variables('masterLbId'),'/probes/httpsProbe')]",

		"infraLoadBalancerName": "[concat(variables('openshiftInfraHostname'), 'lb')]",
		"infraPublicIpAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('infraLbPublicIpDnsLabel'))]",
		"infraLbId": "[resourceId('Microsoft.Network/loadBalancers', variables('infraLoadBalancerName'))]",
		"infraLbFrontEndConfigId": "[concat(variables('infraLbId'), '/frontendIPConfigurations/loadBalancerFrontEnd')]",
		"infraLbBackendPoolId": "[concat(variables('infraLbId'),'/backendAddressPools/loadBalancerBackend')]",
		"infraLbHttpProbeId": "[concat(variables('infraLbId'),'/probes/httpProbe')]",
		"infraLbHttpsProbeId": "[concat(variables('infraLbId'),'/probes/httpsProbe')]",
		"imageReference": {
			"publisher": "RedHat",
			"offer": "RHEL",
			"sku": "7-RAW",
			"version": "latest"
		},
		"redHatTags": {
			"app": "OpenShiftEnterprise",
			"version": "3.11",
			"platform": "AzurePublic",
			"provider": "9d2c71fc-96ba-4b4a-93b3-14def5bc96fc"
		},
		"sshKeyPath": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
		"nodePrepScriptUrl": "[concat(parameters('_artifactsLocation'), 'scripts/nodePrep.sh')]",
		"masterPrepScriptUrl": "[concat(parameters('_artifactsLocation'), 'scripts/masterPrep.sh')]",
		"openshiftDeploymentScriptUrl": "[concat(parameters('_artifactsLocation'), 'scripts/deployOpenShift.sh')]",

		"cloudPakLiteDeploymentScriptUrl": "[concat(parameters('_artifactsLocation'), 'scripts/deployCloudPakDataLite.sh')]",
		"cloudPakWSLDeploymentScriptUrl": "[concat(parameters('_artifactsLocation'), 'scripts/deployCloudPakDataWsl.sh')]",
		"cloudPakWMLDeploymentScriptUrl": "[concat(parameters('_artifactsLocation'), 'scripts/deployCloudPakDataWml.sh')]",
		"cloudPakPreWKCDeploymentScriptUrl": "[concat(parameters('_artifactsLocation'), 'scripts/deployCloudPakDataPreWkc.sh')]",
		"cloudPakWKCDeploymentScriptUrl": "[concat(parameters('_artifactsLocation'), 'scripts/deployCloudPakDataWkc.sh')]",
		"cloudPakDVDeploymentScriptUrl": "[concat(parameters('_artifactsLocation'), 'scripts/deployCloudPakDataDv.sh')]",
		"cloudPakWOSDeploymentScriptUrl": "[concat(parameters('_artifactsLocation'), 'scripts/deployCloudPakDataWos.sh')]",

		"bastionPrepScriptUrl": "[concat(parameters('_artifactsLocation'), 'scripts/bastionPrep.sh')]",
		"nodePrepScriptFileName": "nodePrep.sh",
		"masterPrepScriptFileName": "masterPrep.sh",
		"bastionPrepScriptFileName": "bastionPrep.sh",
		"openshiftDeploymentScriptFileName": "deployOpenShift.sh",

		"cloudPakLiteDeploymentScriptFileName": "deployCloudPakDataLite.sh",
		"cloudPakWSLDeploymentScriptFileName": "deployCloudPakDataWsl.sh",
		"cloudPakWMLDeploymentScriptFileName": "deployCloudPakDataWml.sh",
		"cloudPakPreWKCDeploymentScriptFileName": "deployCloudPakDataPreWkc.sh",
		"cloudPakWKCDeploymentScriptFileName": "deployCloudPakDataWkc.sh",
		"cloudPakDVDeploymentScriptFileName": "deployCloudPakDataDv.sh",
		"cloudPakWOSDeploymentScriptFileName": "deployCloudPakDataWos.sh",

		"clusterNodeDeploymentTemplateUrl": "[concat(parameters('_artifactsLocation'), 'nested/clusternode.json')]",
		"openshiftDeploymentTemplateUrl": "[concat(parameters('_artifactsLocation'), 'nested/openshiftdeploy.json')]",
		"cloudPakDeploymentTemplateUrl": "[concat(parameters('_artifactsLocation'), 'nested/cloudpakdeploy.json')]",
		"nfsNodeDeploymentTemplateUrl": "[concat(parameters('_artifactsLocation'), 'nested/nfsnode.json')]",
		"vmSizesMap": {
			"Standard_DS1": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_DS2": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_DS3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_DS4": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_DS11": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_DS12": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_DS13": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_DS14": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_DS1_v2": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_DS2_v2": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_DS3_v2": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_DS4_v2": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_DS5_v2": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_DS11_v2": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_DS12_v2": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_DS13_v2": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_DS14_v2": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_DS15_v2": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_GS1": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_GS2": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_GS3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_GS4": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_GS5": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_D2s_v3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_D4s_v3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_D8s_v3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_D16s_v3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_D32s_v3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_D64s_v3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_E2s_v3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_E4s_v3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_E8s_v3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_E16s_v3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_E32s_v3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			},
			"Standard_E64s_v3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium"
			}
		},
		"vaultName": "[concat(variables('namingInfix'), '-vault')]",
		"vmName": "[concat(variables('nfsHostname'), '-0')]",
		"backupFabric": "Azure",
		"backupPolicyName": "DefaultPolicy",
		"protectionContainer": "[concat('iaasvmcontainer;iaasvmcontainerv2;', resourceGroup().name, ';', variables('vmName'))]",
		"protectedItem": "[concat('vm;iaasvmcontainerv2;', resourceGroup().name, ';', variables('vmName'))]"
	},
	"resources": [
		{
			"apiVersion": "2019-05-01",
			"name": "pid-06f07fff-296b-5beb-9092-deab0c6bb8ea",
			"type": "Microsoft.Resources/deployments",
			"properties": {
				"mode": "Incremental",
				"template": {
					"$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
					"contentVersion": "1.0.0.0",
					"resources": []
				}
			}
		},
		{
			"apiVersion": "2019-09-01",
			"type": "Microsoft.Network/networkSecurityGroups",
			"name": "[concat(variables('bastionHostname'), '-nsg')]",
			"location": "[variables('location')]",
			"tags": {
				"displayName": "BastionNSG",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"

			},
			"properties": {
				"securityRules": [{
					"name": "allowSSHin_all",
					"properties": {
						"description": "Allow SSH in from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "22",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 100,
						"direction": "Inbound"
					}
				}]
			}
		},{
			"condition": "[equals(parameters('storageOption'), 'nfs')]",
			"apiVersion": "2019-09-01",
			"type": "Microsoft.Network/networkSecurityGroups",
			"name": "[concat(variables('nfsHostname'), '-nsg')]",
			"location": "[variables('location')]",
			"tags": {
				"displayName": "nfsNSG",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"

			},
			"properties": {
				"securityRules": [{
					"name": "allowNFSin",
					"properties": {
						"description": "NFS Protocol Port",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "2049",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 100,
						"direction": "Inbound"
					}
				},{
					"name": "allowSSHin",
					"properties": {
						"description": "SSHin",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "22",
						"sourceAddressPrefix": "[variables('bastionSubnetPrefix')]",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 110,
						"direction": "Inbound"
					}
				}]
			}
		},{
			"apiVersion": "2019-09-01",
			"type": "Microsoft.Network/networkSecurityGroups",
			"name": "[concat(variables('openshiftMasterHostname'), '-nsg')]",
			"location": "[variables('location')]",
			"tags": {
				"displayName": "MasterNSG",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"

			},
			"properties": {
				"securityRules": [{
					"name": "allowSSHin_all",
					"properties": {
						"description": "Allow SSH in from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "22",
						"sourceAddressPrefix": "[variables('bastionSubnetPrefix')]",
						"destinationAddressPrefix": "[variables('masterSubnetPrefix')]",
						"access": "Allow",
						"priority": 100,
						"direction": "Inbound"
					}
				}, {
					"name": "allowHTTPS_all",
					"properties": {
						"description": "Allow HTTPS connections from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "443",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 200,
						"direction": "Inbound"
					}
				}]
			}
		},{
			"apiVersion": "2019-09-01",
			"type": "Microsoft.Network/networkSecurityGroups",
			"name": "[concat(variables('openshiftInfraHostname'), '-nsg')]",
			"location": "[variables('location')]",
			"tags": {
				"displayName": "InfraNSG",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"properties": {
				"securityRules": [{
					"name": "allowSSHin_all",
					"properties": {
						"description": "Allow SSH in from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "22",
						"sourceAddressPrefix": "[variables('bastionSubnetPrefix')]",
						"destinationAddressPrefix": "[variables('masterSubnetPrefix')]",
						"access": "Allow",
						"priority": 100,
						"direction": "Inbound"
					}
				}, {
					"name": "allowHTTPSIn_all",
					"properties": {
						"description": "Allow HTTPS connections from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "443",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 200,
						"direction": "Inbound"
					}
				}, {
					"name": "allowHTTPIn_all",
					"properties": {
						"description": "Allow HTTP connections from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "80",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 300,
						"direction": "Inbound"
					}
				}]
			}
		},{
			"apiVersion": "2019-09-01",
			"type": "Microsoft.Network/networkSecurityGroups",
			"name": "[concat(variables('openshiftNodeHostname'), '-nsg')]",
			"location": "[variables('location')]",
			"tags": {
				"displayName": "NodeNSG",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"properties": {
				"securityRules": [{
					"name": "allowSSHin_all",
					"properties": {
						"description": "Allow SSH in from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "22",
						"sourceAddressPrefix": "[variables('bastionSubnetPrefix')]",
						"destinationAddressPrefix": "[variables('nodeSubnetPrefix')]",
						"access": "Allow",
						"priority": 100,
						"direction": "Inbound"
					}
				}, {
					"name": "allowHTTPS_all",
					"properties": {
						"description": "Allow HTTPS connections from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "443",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 200,
						"direction": "Inbound"
					}
				}, {
					"name": "allowHTTPIn_all",
					"properties": {
						"description": "Allow HTTP connections from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "80",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 300,
						"direction": "Inbound"
					}
				}]
			}
		},{
			"type": "Microsoft.Network/virtualNetworks",
			"name": "[variables('virtualNetworkName')]",
			"location": "[variables('location')]",
			"tags": {
				"displayName": "VirtualNetwork",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"apiVersion": "2019-09-01",
			"properties": {
				"addressSpace": {
					"addressPrefixes": [
						"[variables('addressPrefix')]"
					]
				},
				"subnets": [{
					"name": "[variables('masterSubnetName')]",
					"properties": {
						"addressPrefix": "[variables('masterSubnetPrefix')]"
					}
				}, {
					"name": "[variables('nodeSubnetName')]",
					"properties": {
						"addressPrefix": "[variables('nodeSubnetPrefix')]"
					}
				}, {
					"name": "[variables('bastionSubnetName')]",
					"properties": {
						"addressPrefix": "[variables('bastionSubnetPrefix')]"
					}
				}, {
					"name": "[variables('nfsSubnetName')]",
					"properties": {
						"addressPrefix": "[variables('nfsSubnetPrefix')]"
					}
				}]
			}
		},{
			"type": "Microsoft.Storage/storageAccounts",
			"name": "[variables('newStorageAccountArray')[copyIndex()].name]",
			"location": "[variables('location')]",
			"kind": "Storage",
			"apiVersion": "2019-06-01",
			"tags": {
				"displayName": "[variables('newStorageAccountArray')[copyIndex()].tagName]",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"copy": {
				"name": "storageLoop",
				"count": "[variables(variables('storageLoopCount'))]"
			},
			"sku": {
				"name": "[variables('newStorageAccountArray')[copyIndex()].skuName]",
				"tier": "[variables('newStorageAccountArray')[copyIndex()].skuTier]"
			}
		},{
			"type": "Microsoft.Network/publicIPAddresses",
			"name": "[variables('infraLbPublicIpDnsLabel')]",
			"location": "[variables('location')]",
			"apiVersion": "2019-09-01",
			"sku": {
				"name": "Standard"
			},
			"tags": {
				"displayName": "OpenShiftInfraLBPublicIP",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"properties": {
				"publicIPAllocationMethod": "Static",
				"dnsSettings": {
					"domainNameLabel": "[variables('infraLbPublicIpDnsLabel')]"
				}
			}
		},{
			"type": "Microsoft.Network/publicIPAddresses",
			"name": "[variables('openshiftMasterPublicIpDnsLabel')]",
			"location": "[variables('location')]",
			"sku": {
				"name": "Standard"
			},
			"apiVersion": "2019-09-01",
			"tags": {
				"displayName": "OpenShiftMasterPublicIP",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"properties": {
				"publicIPAllocationMethod": "Static",
				"dnsSettings": {
					"domainNameLabel": "[variables('openshiftMasterPublicIpDnsLabel')]"
				}
			}
		},{
			"type": "Microsoft.Network/publicIPAddresses",
			"name": "[variables('bastionPublicIpDnsLabel')]",
			"location": "[variables('location')]",
			"sku":  {
				"name": "Standard"
			},
			"apiVersion": "2019-09-01",
			"tags": {
				"displayName": "BastionPublicIP",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"properties": {
				"publicIPAllocationMethod": "Static",
				"dnsSettings": {
					"domainNameLabel": "[variables('bastionPublicIpDnsLabel')]"
				}
			}
		},{
			"type": "Microsoft.Network/publicIPAddresses",
			"name": "[variables('nfsPublicIpDnsLabel')]",
			"location": "[variables('location')]",
			"apiVersion": "2019-09-01",
			"tags": {
				"displayName": "nfsPublicIP",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"properties": {
				"publicIPAllocationMethod": "Static",
				"dnsSettings": {
					"domainNameLabel": "[variables('nfsPublicIpDnsLabel')]"
				}
			}
		},{
			"condition": "[equals(parameters('singleZoneOrMultiZone'), 'single')]",
			"type": "Microsoft.Compute/availabilitySets",
			"name": "[variables('availabilitySetArray')[copyIndex()].name]",
			"location": "[variables('location')]",
			"apiVersion": "2019-03-01",
            "sku": {
				"name": "[variables(variables('availabilitySetSku'))]"
			},
			"properties": {
				"platformFaultDomainCount": "[variables(variables('platformFaultDomainCount'))]",
                "platformUpdateDomainCount": 5
			},
			"tags": {
				"displayName": "[variables('availabilitySetArray')[copyIndex()].tagName]",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"copy": {
				"name": "availabiltySetLoop",
				"count": "[length(variables('availabilitySetArray'))]"
			}
		},{
			"condition": "[equals(parameters('storageOption'), 'nfs')]",
			"type": "Microsoft.Compute/availabilitySets",
			"name": "nfsavailabilityset",
			"location": "[variables('location')]",
			"apiVersion": "2019-03-01",
            "sku": {
				"name": "[variables(variables('availabilitySetSku'))]"
			},
			"properties": {
				"platformFaultDomainCount": "[variables(variables('platformFaultDomainCount'))]",
                "platformUpdateDomainCount": 5
			},
			"tags": {
				"displayName": "NfsAvailabilitySet",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			}
		},{
			"type": "Microsoft.Network/loadBalancers",
			"name": "[variables('masterLoadBalancerName')]",
			"location": "[variables('location')]",
			"sku": {
				"name": "Standard"
			},
			"apiVersion": "2019-09-01",
			"tags": {
				"displayName": "OpenShiftMasterLB",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/publicIPAddresses/', variables('openshiftMasterPublicIpDnsLabel'))]"
			],
			"properties": {
				"frontendIPConfigurations": [{
					"name": "LoadBalancerFrontEnd",
					"properties": {
						"publicIPAddress": {
							"id": "[variables('masterPublicIpAddressId')]"
						}
					}
				}],
				"backendAddressPools": [{
					"name": "loadBalancerBackEnd"
				}],
				"loadBalancingRules": [{
					"name": "OpenShiftAdminConsole",
					"properties": {
						"frontendIPConfiguration": {
							"id": "[variables('masterLbFrontEndConfigId')]"
						},
						"backendAddressPool": {
							"id": "[variables('masterLbBackendPoolId')]"
						},
						"protocol": "Tcp",
						"loadDistribution": "SourceIP",
						"idleTimeoutInMinutes": 30,
						"frontendPort": 443,
						"backendPort": 443,
						"probe": {
							"id": "[variables('masterLbHttpsProbeId')]"
						}
					}
				}],
				"probes": [{
					"name": "httpsProbe",
					"properties": {
						"protocol": "Tcp",
						"port": 443,
						"intervalInSeconds": 5,
						"numberOfProbes": 2
					}
				}]
			}
		},{
			"type": "Microsoft.Network/loadBalancers",
			"name": "[variables('infraLoadBalancerName')]",
			"location": "[variables('location')]",
			"sku": {
				"name": "Standard"
			},
			"apiVersion": "2019-09-01",
			"tags": {
				"displayName": "OpenShiftInfraLB",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/publicIPAddresses/', variables('infraLbPublicIpDnsLabel'))]"
			],
			"properties": {
				"frontendIPConfigurations": [{
					"name": "LoadBalancerFrontEnd",
					"properties": {
						"publicIPAddress": {
							"id": "[variables('infraPublicIpAddressId')]"
						}
					}
				}],
				"backendAddressPools": [{
					"name": "loadBalancerBackEnd"
				}],
				"loadBalancingRules": [{
					"name": "OpenShiftRouterHTTP",
					"properties": {
						"frontendIPConfiguration": {
							"id": "[variables('infraLbFrontEndConfigId')]"
						},
						"backendAddressPool": {
							"id": "[variables('infraLbBackendPoolId')]"
						},
						"protocol": "Tcp",
						"frontendPort": 80,
						"backendPort": 80,
						"probe": {
							"id": "[variables('infraLbHttpProbeId')]"
						}
					}
				}, {
					"name": "OpenShiftRouterHTTPS",
					"properties": {
						"frontendIPConfiguration": {
							"id": "[variables('infraLbFrontEndConfigId')]"
						},
						"backendAddressPool": {
							"id": "[variables('infraLbBackendPoolId')]"
						},
						"protocol": "Tcp",
						"frontendPort": 443,
						"backendPort": 443,
						"probe": {
							"id": "[variables('infraLbHttpsProbeId')]"
						}
					}
				}],
				"probes": [{
					"name": "httpProbe",
					"properties": {
						"protocol": "Tcp",
						"port": 80,
						"intervalInSeconds": 5,
						"numberOfProbes": 2
					}
				}, {
					"name": "httpsProbe",
					"properties": {
						"protocol": "Tcp",
						"port": 443,
						"intervalInSeconds": 5,
						"numberOfProbes": 2
					}
				}]
			}
		},{
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('bastionHostname'), '-', copyIndex(), '-nic')]",
			"location": "[variables('location')]",
			"apiVersion": "2019-09-01",
			"tags": {
				"displayName": "BastionNetworkInterface",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
				"[concat('Microsoft.Network/networkSecurityGroups/', variables('bastionHostname'), '-nsg')]",
				"[concat('Microsoft.Network/publicIPAddresses/', variables('bastionPublicIpDnsLabel'))]"
			],
			"copy": {
				"name": "bastionNicLoop",
				"count": "[parameters('bastionInstanceCount')]"
			},
			"properties": {
				"ipConfigurations": [{
					"name": "[concat(variables('bastionHostname'), copyIndex(), 'ipconfig')]",
					"properties": {
						"privateIPAllocationMethod": "Dynamic",
						"subnet": {
							"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('bastionSubnetName'))]"
						},
						"publicIPAddress": {
							"id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('bastionPublicIpDnsLabel'))]"
						}
					}
				}],
				"networkSecurityGroup": {
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('bastionHostname'), '-nsg'))]"
				}
			}
		},{
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('nfsHostname'), '-', copyIndex(), '-nic')]",
			"location": "[variables('location')]",
			"apiVersion": "2019-09-01",
			"tags": {
				"displayName": "nfsNetworkInterface",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
				"[concat('Microsoft.Network/networkSecurityGroups/', variables('nfsHostname'), '-nsg')]",
				"[concat('Microsoft.Network/publicIPAddresses/', variables('nfsPublicIpDnsLabel'))]"
			],
			"copy": {
				"name": "nfsNicLoop",
				"count": "[variables('nfsInstanceCount')]"
			},
			"properties": {
				"ipConfigurations": [{
					"name": "[concat(variables('nfsHostname'), copyIndex(), 'ipconfig')]",
					"properties": {
						"privateIPAllocationMethod": "Dynamic",
						"subnet": {
							"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('nfsSubnetName'))]"
						},
						"publicIPAddress": {
							"id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('nfsPublicIpDnsLabel'))]"
						}
					}
				}],
				"networkSecurityGroup": {
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('nfsHostname'), '-nsg'))]"
				}
			}
		},{
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('openshiftMasterHostname'), '-', copyIndex(), '-nic')]",
			"location": "[variables('location')]",
			"apiVersion": "2019-09-01",
			"tags": {
				"displayName": "OpenShiftMasterNetworkInterface",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
				"[concat('Microsoft.Network/loadBalancers/', variables('masterLoadBalancerName'))]",
				"[concat('Microsoft.Network/networkSecurityGroups/', variables('openshiftMasterHostname'), '-nsg')]"
			],
			"copy": {
				"name": "masterNicLoop",
				"count": "[parameters('masterInstanceCount')]"
			},
			"properties": {
				"ipConfigurations": [{
					"name": "[concat(variables('openshiftMasterHostname'), copyIndex(), 'ipconfig')]",
					"properties": {
						"privateIPAllocationMethod": "Dynamic",
						"subnet": {
							"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('masterSubnetName'))]"
						},
						"loadBalancerBackendAddressPools": [{
							"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('masterLoadBalancerName'), '/backendAddressPools/loadBalancerBackEnd')]"
						}]
					}
				}],
				"networkSecurityGroup": {
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('openshiftMasterHostname'), '-nsg'))]"
				}
			}
		},{
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('openshiftInfraHostname'), '-', copyIndex(), '-nic')]",
			"location": "[variables('location')]",
			"apiVersion": "2019-09-01",
			"tags": {
				"displayName": "OpenShiftInfraNetworkInterfaces",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
				"[concat('Microsoft.Network/loadBalancers/', variables('infraLoadBalancerName'))]",
				"[concat('Microsoft.Network/networkSecurityGroups/', variables('openshiftInfraHostname'), '-nsg')]"
			],
			"copy": {
				"name": "infraNicLoop",
				"count": "[parameters('infraInstanceCount')]"
			},
			"properties": {
				"ipConfigurations": [{
					"name": "[concat(variables('openshiftInfraHostname'), copyIndex(), 'ipconfig')]",
					"properties": {
						"privateIPAllocationMethod": "Dynamic",
						"subnet": {
							"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('masterSubnetName'))]"
						},
						"loadBalancerBackendAddressPools": [{
							"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('infraLoadBalancerName'), '/backendAddressPools/loadBalancerBackEnd')]"
						}]
					}
				}],
				"networkSecurityGroup": {
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('openshiftInfraHostname'), '-nsg'))]"
				}
			}
		},{
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('openshiftNodeHostname'), '-', copyIndex(), '-nic')]",
			"location": "[variables('location')]",
			"apiVersion": "2019-09-01",
			"tags": {
				"displayName": "OpenShiftNodeNetworkInterfaces",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
				"[concat('Microsoft.Network/networkSecurityGroups/', variables('openshiftNodeHostname'), '-nsg')]"
			],
			"copy": {
				"name": "nodeNicLoop",
				"count": "[parameters('nodeInstanceCount')]"
			},
			"properties": {
				"ipConfigurations": [{
					"name": "[concat(variables('openshiftNodeHostname'), copyIndex(), 'ipconfig')]",
					"properties": {
						"privateIPAllocationMethod": "Dynamic",
						"subnet": {
							"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('nodeSubnetName'))]"
						}
					}
				}],
				"networkSecurityGroup": {
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('openshiftNodeHostname'), '-nsg'))]"
				}
			}
		},{
			"name": "[concat('masterVmDeployment', copyindex())]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('diagStorageAccount1'))]",
				"masterNicLoop",
				"masteravailabilityset"
			],
			"copy": {
				"name": "masterVmLoop",
				"count": "[parameters('masterInstanceCount')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('clusterNodeDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"sshKeyPath": {
						"value": "[variables('sshKeyPath')]"
					},
					"sshPublicKey": {
						"value": "[parameters('sshPublicKey')]"
					},
					"dataDiskSize": {
						"value": "[parameters('dataDiskSize')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"vmSize": {
						"value": "[parameters('masterVmSize')]"
					},
					"availabilitySet": {
						"value": "masteravailabilityset"
					},
					"hostname": {
						"value": "[concat(variables('openshiftMasterHostname'), '-', copyIndex())]"
					},
					"unmanagedOsDiskUri": {
						"value": "[reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables(variables('masterUri'))), variables('apiVersionStorage')).primaryEndpoints['blob']]"
					},
					"unmanagedDataDiskUri": {
						"value": "[reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables(variables('masterUri'))), variables('apiVersionStorage')).primaryEndpoints['blob']]"
					},
					"role": {
						"value": "masternode"
					},
					"vmStorageType": {
						"value": "[variables('vmSizesMap')[parameters('masterVmSize')].storageAccountType]"
					},
					"storageKind": {
						"value": "[parameters('storageKind')]"
					},
					"newStorageAccountOs": {
						"value": "[variables('newStorageAccountMaster')]"
					},
					"newStorageAccountData": {
						"value": "[variables('newStorageAccountMaster')]"
					},
					"diagStorageAccount": {
						"value": "[variables('diagStorageAccount1')]"
					},
					"apiVersionStorage": {
						"value": "[variables('apiVersionStorage')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"imageReference": {
						"value": "[variables('imageReference')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"storageType": {
						"value": "[parameters('storageOption')]"
					},
					"singleZoneOrMultiZone": {
						"value": "[parameters('singleZoneOrMultiZone')]"
					},
					"zone": {
						"value": "[add(mod(copyIndex(), 3), 1)]"
					}
				}
			}
		},{
			"name": "[concat('infraVmDeployment', copyindex())]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('diagStorageAccount1'))]",
				"infraNicLoop",
				"infraavailabilityset"
			],
			"copy": {
				"name": "infraVmLoop",
				"count": "[parameters('infraInstanceCount')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('clusterNodeDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"sshKeyPath": {
						"value": "[variables('sshKeyPath')]"
					},
					"sshPublicKey": {
						"value": "[parameters('sshPublicKey')]"
					},
					"dataDiskSize": {
						"value": "[parameters('dataDiskSize')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"vmSize": {
						"value": "[parameters('infraVmSize')]"
					},
					"availabilitySet": {
						"value": "infraavailabilityset"
					},
					"hostname": {
						"value": "[concat(variables('openshiftInfraHostname'), '-', copyIndex())]"
					},
					"unmanagedOsDiskUri": {
						"value": "[reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables(variables('infraUri'))), variables('apiVersionStorage')).primaryEndpoints['blob']]"
					},
					"unmanagedDataDiskUri": {
						"value": "[reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables(variables('infraUri'))), variables('apiVersionStorage')).primaryEndpoints['blob']]"
					},
					"role": {
						"value": "infranode"
					},
					"vmStorageType": {
						"value": "[variables('vmSizesMap')[parameters('infraVmSize')].storageAccountType]"
					},
					"storageKind": {
						"value": "[parameters('storageKind')]"
					},
					"newStorageAccountOs": {
						"value": "[variables('newStorageAccountInfra')]"
					},
					"newStorageAccountData": {
						"value": "[variables('newStorageAccountInfra')]"
					},
					"diagStorageAccount": {
						"value": "[variables('diagStorageAccount1')]"
					},
					"apiVersionStorage": {
						"value": "[variables('apiVersionStorage')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"imageReference": {
						"value": "[variables('imageReference')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"storageType": {
						"value": "[parameters('storageOption')]"
					},
					"singleZoneOrMultiZone": {
						"value": "[parameters('singleZoneOrMultiZone')]"
					},
					"zone": {
						"value": "[add(mod(copyIndex(), 3), 1)]"
					}
				}
			}
		},{
			"name": "[concat('nodeVmDeployment', copyindex())]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('diagStorageAccount2'))]",
				"nodeNicLoop",
				"nodeavailabilityset"
			],
			"copy": {
				"name": "nodeVmLoop",
				"count": "[parameters('nodeInstanceCount')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('clusterNodeDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"sshKeyPath": {
						"value": "[variables('sshKeyPath')]"
					},
					"sshPublicKey": {
						"value": "[parameters('sshPublicKey')]"
					},
					"dataDiskSize": {
						"value": "[parameters('dataDiskSize')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"vmSize": {
						"value": "[parameters('nodeVmSize')]"
					},
					"availabilitySet": {
						"value": "nodeavailabilityset"
					},
					"hostname": {
						"value": "[concat(variables('openshiftNodeHostname'), '-', copyIndex())]"
					},
					"unmanagedOsDiskUri": {
						"value": "[reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables(variables('nodeOsUri'))), variables('apiVersionStorage')).primaryEndpoints['blob']]"
					},
					"unmanagedDataDiskUri": {
						"value": "[reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables(variables('nodeDataUri'))), variables('apiVersionStorage')).primaryEndpoints['blob']]"
					},
					"role": {
						"value": "appnode"
					},
					"vmStorageType": {
						"value": "[variables('vmSizesMap')[parameters('nodeVmSize')].storageAccountType]"
					},
					"storageKind": {
						"value": "[parameters('storageKind')]"
					},
					"newStorageAccountOs": {
						"value": "[variables('newStorageAccountNodeOs')]"
					},
					"newStorageAccountData": {
						"value": "[variables('newStorageAccountNodeData')]"
					},
					"diagStorageAccount": {
						"value": "[variables('diagStorageAccount2')]"
					},
					"apiVersionStorage": {
						"value": "[variables('apiVersionStorage')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"imageReference": {
						"value": "[variables('imageReference')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"storageType": {
						"value": "[parameters('storageOption')]"
					},
					"singleZoneOrMultiZone": {
						"value": "[parameters('singleZoneOrMultiZone')]"
					},
					"zone": {
						"value": "[add(mod(copyIndex(), 3), 1)]"
					}
				}
			}
		},{
			"name": "[concat('BastionVmDeployment', copyindex())]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('diagStorageAccount3'))]",
				"bastionNicLoop",
				"bastionavailabilityset"
			],
			"copy": {
				"name": "bastionVmLoop",
				"count": "[parameters('bastionInstanceCount')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('clusterNodeDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"sshKeyPath": {
						"value": "[variables('sshKeyPath')]"
					},
					"sshPublicKey": {
						"value": "[parameters('sshPublicKey')]"
					},
					"dataDiskSize": {
						"value": "[parameters('dataDiskSize')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"vmSize": {
						"value": "[parameters('bastionVmSize')]"
					},
					"availabilitySet": {
						"value": "bastionavailabilityset"
					},
					"hostname": {
						"value": "[concat(variables('bastionHostname'), '-', copyIndex())]"
					},
					"unmanagedOsDiskUri": {
						"value": "[reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables(variables('nodeOsUri'))), variables('apiVersionStorage')).primaryEndpoints['blob']]"
					},
					"unmanagedDataDiskUri": {
						"value": "[reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables(variables('nodeDataUri'))), variables('apiVersionStorage')).primaryEndpoints['blob']]"
					},
					"role": {
						"value": "bootnode"
					},
					"vmStorageType": {
						"value": "[variables('vmSizesMap')[parameters('bastionVmSize')].storageAccountType]"
					},
					"storageKind": {
						"value": "[parameters('storageKind')]"
					},
					"newStorageAccountOs": {
						"value": "[variables('newStorageAccountNodeOs')]"
					},
					"newStorageAccountData": {
						"value": "[variables('newStorageAccountNodeData')]"
					},
					"diagStorageAccount": {
						"value": "[variables('diagStorageAccount3')]"
					},
					"apiVersionStorage": {
						"value": "[variables('apiVersionStorage')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"imageReference": {
						"value": "[variables('imageReference')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"storageType": {
						"value": "[parameters('storageOption')]"
					},
					"singleZoneOrMultiZone": {
						"value": "[parameters('singleZoneOrMultiZone')]"
					},
					"zone": {
						"value": "[add(mod(copyIndex(), 3), 1)]"
					}
				}
			}
		},{
			"name": "[concat('nfsVmDeployment', copyindex())]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('diagStorageAccount4'))]",
				"nfsNicLoop",
				"nfsavailabilityset"
			],
			"copy": {
				"name": "nfsVmLoop",
				"count": "[variables('nfsInstanceCount')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('nfsNodeDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"sshKeyPath": {
						"value": "[variables('sshKeyPath')]"
					},
					"sshPublicKey": {
						"value": "[parameters('sshPublicKey')]"
					},
					"dataDiskSize": {
						"value": "[parameters('dataDiskSize')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"vmSize": {
						"value": "[variables('nfsVmSize')]"
					},
					"availabilitySet": {
						"value": "nfsavailabilityset"
					},
					"hostname": {
						"value": "[concat(variables('nfsHostname'), '-', copyIndex())]"
					},
					"role": {
						"value": "datanode"
					},
					"vmStorageType": {
						"value": "[variables('vmSizesMap')[variables('nfsVmSize')].storageAccountType]"
					},
					"diagStorageAccount": {
						"value": "[variables('diagStorageAccount4')]"
					},
					"apiVersionStorage": {
						"value": "[variables('apiVersionStorage')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"imageReference": {
						"value": "[variables('imageReference')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					}
				}
			}
		},{
			"condition": "[equals(parameters('storageOption'), 'nfs')]",
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('nfsHostname'), '-', copyIndex(), '/prepNodes')]",
			"location": "[variables('location')]",
			"apiVersion": "2019-07-01",
			"tags": {
				"displayName": "PrepNodes",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[concat('nfsVmDeployment', copyindex())]"
			],
			"copy": {
				"name": "nfsPrepLoop",
				"count": "[variables('nfsInstanceCount')]"
			},
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[variables('nodePrepScriptUrl')]"
					]
				},
				"protectedSettings": {
					"commandToExecute": "[concat('bash ', variables('nodePrepScriptFileName'))]"
				}
			}
		},{
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('openshiftMasterHostname'), '-', copyIndex(), '/prepMaster')]",
			"location": "[variables('location')]",
			"apiVersion": "2019-07-01",
			"tags": {
				"displayName": "PrepMaster",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[concat('masterVmDeployment', copyindex())]"
			],
			"copy": {
				"name": "masterPrepLoop",
				"count": "[parameters('masterInstanceCount')]"
			},
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[variables('masterPrepScriptUrl')]"
					]
				},
				"protectedSettings": {
					"commandToExecute": "[concat('bash ', variables('masterPrepScriptFileName'), ' ', variables('newStorageAccountPersistentVolume1'), ' ', parameters('adminUsername'), ' ', variables('location'))]"
				}
			}
		},{
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('openshiftInfraHostname'), '-', copyIndex(), '/prepNodes')]",
			"location": "[variables('location')]",
			"apiVersion": "2019-07-01",
			"tags": {
				"displayName": "PrepInfra",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[concat('infraVmDeployment', copyindex())]"
			],
			"copy": {
				"name": "infraPrepLoop",
				"count": "[parameters('infraInstanceCount')]"
			},
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[variables('nodePrepScriptUrl')]"
					]
				},
				"protectedSettings": {
					"commandToExecute": "[concat('bash ', variables('nodePrepScriptFileName'))]"
				}
			}
		},{
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('openshiftNodeHostname'), '-', copyIndex(), '/prepNodes')]",
			"location": "[variables('location')]",
			"apiVersion": "2019-07-01",
			"tags": {
				"displayName": "PrepNodes",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[concat('nodeVmDeployment', copyindex())]"
			],
			"copy": {
				"name": "nodePrepLoop",
				"count": "[parameters('nodeInstanceCount')]"
			},
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[variables('nodePrepScriptUrl')]"
					]
				},
				"protectedSettings": {
					"commandToExecute": "[concat('bash ', variables('nodePrepScriptFileName'))]"
				}
			}
		},{
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('bastionHostname'), '-', copyIndex(), '/deployOpenShift')]",
			"location": "[variables('location')]",
			"apiVersion": "2019-07-01",
			"tags": {
				"displayName": "PrepBastion",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[concat('BastionVmDeployment', copyindex())]"
			],
			"copy": {
				"name": "bastionPrepLoop",
				"count": "[parameters('bastionInstanceCount')]"
			},
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[variables('bastionPrepScriptUrl')]"
					]
				},
				"protectedSettings": {
					"commandToExecute": "[concat('bash ', variables('bastionPrepScriptFileName'), ' \"', parameters('rhelUsername'), '\"', ' \"' , parameters('rhelPassword'), '\"', ' \"', parameters('rhelPoolID'), '\"', ' \"', parameters('adminUsername'), '\"')]"
				}
			}
		},{
			"name": "OpenShiftDeployment",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountRegistry'))]",
				"masterPrepLoop",
				"infraPrepLoop",
				"nodePrepLoop",
				"bastionPrepLoop"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('openshiftDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"openshiftDeploymentScriptUrl": {
						"value": "[variables('openshiftDeploymentScriptUrl')]"
					},
					"openshiftDeploymentScriptFileName": {
						"value": "[variables('openshiftDeploymentScriptFileName')]"
					},
					"newStorageAccountRegistry": {
						"value": "[variables('newStorageAccountRegistry')]"
					},
					"newStorageAccountKey": {
						"value": "[listKeys(variables('newStorageAccountRegistry'), variables('apiVersionStorage')).keys[0].value]"
					},
					"openshiftMasterHostname": {
						"value": "[variables('openshiftMasterHostname')]"
					},
					"openshiftMasterPublicIpFqdn": {
						"value": "[reference(variables('openshiftMasterPublicIpDnsLabel')).dnsSettings.fqdn]"
					},
					"openshiftMasterPublicIpAddress": {
						"value": "[reference(variables('openshiftMasterPublicIpDnsLabel')).ipAddress]"
					},
					"openshiftInfraHostname": {
						"value": "[variables('openshiftInfraHostname')]"
					},
					"openshiftNodeHostname": {
						"value": "[variables('openshiftNodeHostname')]"
					},
					"masterInstanceCount": {
						"value": "[parameters('masterInstanceCount')]"
					},
					"infraInstanceCount": {
						"value": "[parameters('infraInstanceCount')]"
					},
					"nodeInstanceCount": {
						"value": "[parameters('nodeInstanceCount')]"
					},
					"storageKind": {
						"value": "[parameters('storageKind')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"openshiftPassword": {
						"value": "[parameters('openshiftPassword')]"
					},
					"enableMetrics": {
						"value": "[parameters('enableMetrics')]"
					},
					"enableLogging": {
						"value": "[parameters('enableLogging')]"
					},
					"enableAzure": {
						"value": "[parameters('enableAzure')]"
					},
					"aadClientId": {
						"value": "[parameters('aadClientId')]"
					},
					"aadClientSecret": {
						"value": "[parameters('aadClientSecret')]"
					},
					"nipioDomain": {
						"value": "[concat(reference(variables('infraLbPublicIpDnsLabel')).ipAddress, '.nip.io')]"
					},
					"customDomain": {
						"value": "[variables('defaultSubDomain')]"
					},
					"subDomainChosen": {
						"value": "[concat(parameters('defaultSubDomainType'), 'Domain')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"sshPrivateKey": {
						"reference": {
							"keyvault": {
								"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('keyVaultResourceGroup'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
							},
							"secretName": "[parameters('keyVaultSecret')]"
						}
					},
					"rhelUsername": {
						"value": "[parameters('rhelUsername')]"
					},
					"rhelPassword": {
						"value": "[parameters('rhelPassword')]"
					},
					"dataStorageAccount":{
						"value": "[variables('dataStorageAccount')]"
					},
					"virtualNetworkName": {
						"value": "[variables('virtualNetworkName')]"
					},
					"nodeSecurityGroup": {
						"value": "[concat(variables('openshiftNodeHostname'), '-nsg')]"
					},
					"nodeAvailabilitySet": {
						"value": "nodeavailabilityset"
					},
					"rhelPoolID": {
						"value": "[parameters('rhelPoolID')]"
					},
					"storageOption": {
						"value": "[parameters('storageOption')]"
					},
					"bastionHostname": {
						"value": "[variables('bastionHostname')]"
					},
					"nfsHostname": {
						"value": "[variables('nfsHostname')]"
					},
					"singleZoneOrMultiZone": {
						"value": "[parameters('singleZoneOrMultiZone')]"
					}
				}
			}
		},{
			"name": "CloudPakLiteDeployment",
			"condition": "[equals(parameters('cloudPakLicenseAgreement'), 'yes')]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountRegistry'))]",
				"[resourceId('Microsoft.Storage/storageAccounts', variables('dataStorageAccount'))]",
				"masterPrepLoop",
				"infraPrepLoop",
				"nodePrepLoop",
				"OpenShiftDeployment"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('cloudPakDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"cloudPakDeploymentScriptUrl": {
						"value": "[variables('cloudPakLiteDeploymentScriptUrl')]"
					},
					"cloudPakDeploymentScriptFileName": {
						"value": "[variables('cloudPakLiteDeploymentScriptFileName')]"
					},
					"openshiftMasterHostname": {
						"value": "[variables('openshiftMasterHostname')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"ocuser": {
						"value": "[parameters('adminUsername')]"
					},
					"ocpassword": {
						"value": "[parameters('openshiftPassword')]"
					},
					"storageOption": {
						"value": "[parameters('storageOption')]"
					},
					"masterPublicHostname": {
						"value": "[reference(variables('openshiftMasterPublicIpDnsLabel')).dnsSettings.fqdn]"
					},
					"bastionHostname": {
						"value": "[variables('bastionHostname')]"
					},
					"projectName": {
						"value": "[parameters('projectName')]"
					},
					"apiKeyUsername": {
						"value": "[parameters('apiKeyUsername')]"
					},
					"apiKey": {
						"value": "[parameters('apiKey')]"
					}
				}
			}
		},{
			"name": "CloudPakWSLDeployment",
			"condition": "[and(equals(parameters('cloudPakLicenseAgreement'), 'yes'), equals(parameters('installWatsonStudioLibrary'), 'yes'))]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountRegistry'))]",
				"[resourceId('Microsoft.Storage/storageAccounts', variables('dataStorageAccount'))]",
				"masterPrepLoop",
				"infraPrepLoop",
				"nodePrepLoop",
				"OpenShiftDeployment",
				"CloudPakDVDeployment"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('cloudPakDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"cloudPakDeploymentScriptUrl": {
						"value": "[variables('cloudPakWSLDeploymentScriptUrl')]"
					},
					"cloudPakDeploymentScriptFileName": {
						"value": "[variables('cloudPakWSLDeploymentScriptFileName')]"
					},
					"openshiftMasterHostname": {
						"value": "[variables('openshiftMasterHostname')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"ocuser": {
						"value": "[parameters('adminUsername')]"
					},
					"ocpassword": {
						"value": "[parameters('openshiftPassword')]"
					},
					"storageOption": {
						"value": "[parameters('storageOption')]"
					},
					"masterPublicHostname": {
						"value": "[reference(variables('openshiftMasterPublicIpDnsLabel')).dnsSettings.fqdn]"
					},
					"bastionHostname": {
						"value": "[variables('bastionHostname')]"
					},
					"projectName": {
						"value": "[parameters('projectName')]"
					},
					"apiKeyUsername": {
						"value": "[parameters('apiKeyUsername')]"
					},
					"apiKey": {
						"value": "[parameters('apiKey')]"
					}
				}
			}
		},{
			"name": "CloudPakWMLDeployment",
			"condition": "[and(equals(parameters('cloudPakLicenseAgreement'), 'yes'), or(equals(parameters('installWatsonMachineLearning'), 'yes'), equals(parameters('installWatsonOpenscaleAndWatsonMachineLearning'), 'yes')))]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountRegistry'))]",
				"[resourceId('Microsoft.Storage/storageAccounts', variables('dataStorageAccount'))]",
				"masterPrepLoop",
				"infraPrepLoop",
				"nodePrepLoop",
				"OpenShiftDeployment",
				"CloudPakWSLDeployment"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('cloudPakDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"cloudPakDeploymentScriptUrl": {
						"value": "[variables('cloudPakWMLDeploymentScriptUrl')]"
					},
					"cloudPakDeploymentScriptFileName": {
						"value": "[variables('cloudPakWMLDeploymentScriptFileName')]"
					},
					"openshiftMasterHostname": {
						"value": "[variables('openshiftMasterHostname')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"ocuser": {
						"value": "[parameters('adminUsername')]"
					},
					"ocpassword": {
						"value": "[parameters('openshiftPassword')]"
					},
					"storageOption": {
						"value": "[parameters('storageOption')]"
					},
					"masterPublicHostname": {
						"value": "[reference(variables('openshiftMasterPublicIpDnsLabel')).dnsSettings.fqdn]"
					},
					"bastionHostname": {
						"value": "[variables('bastionHostname')]"
					},
					"projectName": {
						"value": "[parameters('projectName')]"
					},
					"apiKeyUsername": {
						"value": "[parameters('apiKeyUsername')]"
					},
					"apiKey": {
						"value": "[parameters('apiKey')]"
					}
				}
			}
		},{
			"name": "CloudPakPreWKCDeployment",
			"condition": "[and(equals(parameters('cloudPakLicenseAgreement'), 'yes'), equals(parameters('installWatsonKnowledgeCatalog'), 'yes'))]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountRegistry'))]",
				"[resourceId('Microsoft.Storage/storageAccounts', variables('dataStorageAccount'))]",
				"masterPrepLoop",
				"infraPrepLoop",
				"nodePrepLoop",
				"OpenShiftDeployment",
				"CloudPakWMLDeployment"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('cloudPakDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"cloudPakDeploymentScriptUrl": {
						"value": "[variables('cloudPakPreWKCDeploymentScriptUrl')]"
					},
					"cloudPakDeploymentScriptFileName": {
						"value": "[variables('cloudPakPreWKCDeploymentScriptFileName')]"
					},
					"openshiftMasterHostname": {
						"value": "[variables('openshiftMasterHostname')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"ocuser": {
						"value": "[parameters('adminUsername')]"
					},
					"ocpassword": {
						"value": "[parameters('openshiftPassword')]"
					},
					"storageOption": {
						"value": "[parameters('storageOption')]"
					},
					"masterPublicHostname": {
						"value": "[reference(variables('openshiftMasterPublicIpDnsLabel')).dnsSettings.fqdn]"
					},
					"bastionHostname": {
						"value": "[variables('bastionHostname')]"
					},
					"projectName": {
						"value": "[parameters('projectName')]"
					},
					"apiKeyUsername": {
						"value": "[parameters('apiKeyUsername')]"
					},
					"apiKey": {
						"value": "[parameters('apiKey')]"
					}
				}
			}
		},{
			"name": "CloudPakWKCDeployment",
			"condition": "[and(equals(parameters('cloudPakLicenseAgreement'), 'yes'), equals(parameters('installWatsonKnowledgeCatalog'), 'yes'))]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountRegistry'))]",
				"[resourceId('Microsoft.Storage/storageAccounts', variables('dataStorageAccount'))]",
				"masterPrepLoop",
				"infraPrepLoop",
				"nodePrepLoop",
				"OpenShiftDeployment",
				"CloudPakPreWKCDeployment"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('cloudPakDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"cloudPakDeploymentScriptUrl": {
						"value": "[variables('cloudPakWKCDeploymentScriptUrl')]"
					},
					"cloudPakDeploymentScriptFileName": {
						"value": "[variables('cloudPakWKCDeploymentScriptFileName')]"
					},
					"openshiftMasterHostname": {
						"value": "[variables('openshiftMasterHostname')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"ocuser": {
						"value": "[parameters('adminUsername')]"
					},
					"ocpassword": {
						"value": "[parameters('openshiftPassword')]"
					},
					"storageOption": {
						"value": "[parameters('storageOption')]"
					},
					"masterPublicHostname": {
						"value": "[reference(variables('openshiftMasterPublicIpDnsLabel')).dnsSettings.fqdn]"
					},
					"bastionHostname": {
						"value": "[variables('bastionHostname')]"
					},
					"projectName": {
						"value": "[parameters('projectName')]"
					},
					"apiKeyUsername": {
						"value": "[parameters('apiKeyUsername')]"
					},
					"apiKey": {
						"value": "[parameters('apiKey')]"
					}
				}
			}
		},{
			"name": "CloudPakDVDeployment",
			"condition": "[and(equals(parameters('cloudPakLicenseAgreement'), 'yes'), equals(parameters('installDataVirtualization'), 'yes'))]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountRegistry'))]",
				"[resourceId('Microsoft.Storage/storageAccounts', variables('dataStorageAccount'))]",
				"masterPrepLoop",
				"infraPrepLoop",
				"nodePrepLoop",
				"OpenShiftDeployment",
				"CloudPakLiteDeployment"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('cloudPakDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"cloudPakDeploymentScriptUrl": {
						"value": "[variables('cloudPakDVDeploymentScriptUrl')]"
					},
					"cloudPakDeploymentScriptFileName": {
						"value": "[variables('cloudPakDVDeploymentScriptFileName')]"
					},
					"openshiftMasterHostname": {
						"value": "[variables('openshiftMasterHostname')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"ocuser": {
						"value": "[parameters('adminUsername')]"
					},
					"ocpassword": {
						"value": "[parameters('openshiftPassword')]"
					},
					"storageOption": {
						"value": "[parameters('storageOption')]"
					},
					"masterPublicHostname": {
						"value": "[reference(variables('openshiftMasterPublicIpDnsLabel')).dnsSettings.fqdn]"
					},
					"bastionHostname": {
						"value": "[variables('bastionHostname')]"
					},
					"projectName": {
						"value": "[parameters('projectName')]"
					},
					"apiKeyUsername": {
						"value": "[parameters('apiKeyUsername')]"
					},
					"apiKey": {
						"value": "[parameters('apiKey')]"
					}
				}
			}
		},{
			"name": "CloudPakWOSDeployment",
			"condition": "[and(equals(parameters('cloudPakLicenseAgreement'), 'yes'), equals(parameters('installWatsonOpenscaleAndWatsonMachineLearning'), 'yes'))]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountRegistry'))]",
				"[resourceId('Microsoft.Storage/storageAccounts', variables('dataStorageAccount'))]",
				"masterPrepLoop",
				"infraPrepLoop",
				"nodePrepLoop",
				"OpenShiftDeployment",
				"CloudPakLiteDeployment",
				"CloudPakWMLDeployment"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('cloudPakDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"cloudPakDeploymentScriptUrl": {
						"value": "[variables('cloudPakWOSDeploymentScriptUrl')]"
					},
					"cloudPakDeploymentScriptFileName": {
						"value": "[variables('cloudPakWOSDeploymentScriptFileName')]"
					},
					"openshiftMasterHostname": {
						"value": "[variables('openshiftMasterHostname')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"ocuser": {
						"value": "[parameters('adminUsername')]"
					},
					"ocpassword": {
						"value": "[parameters('openshiftPassword')]"
					},
					"storageOption": {
						"value": "[parameters('storageOption')]"
					},
					"masterPublicHostname": {
						"value": "[reference(variables('openshiftMasterPublicIpDnsLabel')).dnsSettings.fqdn]"
					},
					"bastionHostname": {
						"value": "[variables('bastionHostname')]"
					},
					"projectName": {
						"value": "[parameters('projectName')]"
					},
					"apiKeyUsername": {
						"value": "[parameters('apiKeyUsername')]"
					},
					"apiKey": {
						"value": "[parameters('apiKey')]"
					}
				}
			}
		},{
			"condition": "[equals(parameters('enableBackup'), 'true')]",
			"type": "Microsoft.RecoveryServices/vaults",
			"apiVersion": "2018-07-10",
			"location": "[variables('location')]",
			"name": "[variables('vaultName')]",
			"sku": {
				"name": "RS0",
				"tier": "Standard"
			},
			"properties": {}
		},{
			"condition": "[equals(parameters('enableBackup'), 'true')]",
			"type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
			"apiVersion": "2016-12-01",
			"name": "[concat(variables('vaultName'), '/', variables('backupFabric'), '/', variables('protectionContainer'), '/', variables('protectedItem'))]",
			"dependsOn": [
				"[concat('nfsVmDeployment', 0)]",
				"[resourceId('Microsoft.RecoveryServices/vaults', variables('vaultName'))]"
			],
			"properties": {
				"protectedItemType": "Microsoft.Compute/virtualMachines",
				"policyId": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', variables('vaultName'), variables('backupPolicyName'))]",
				"sourceResourceId": "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
			}
		}
	],
	"outputs": {
		"OpenShift Console Url": {
			"type": "string",
			"value": "[concat('https://', reference(variables('openshiftMasterPublicIpDnsLabel')).dnsSettings.fqdn, '/console')]"
		},
		"OpenShift Bastion SSH": {
			"type": "string",
			"value": "[concat('ssh ', parameters('adminUsername'), '@', reference(variables('bastionPublicIpDnsLabel')).dnsSettings.fqdn)]"
		},
		"OpenShift Infra Load Balancer FQDN": {
			"type": "string",
			"value": "[reference(variables('infraLbPublicIpDnsLabel')).dnsSettings.fqdn]"
		},
		"Cloud Pak for Data URL": {
			"type": "string",
			"value": "[concat('https://', parameters('projectName'), '-cpd-', parameters('projectName'), '.',  reference(resourceId('Microsoft.Network/publicIPAddresses',variables('infraLbPublicIpDnsLabel'))).IpAddress, '.nip.io')]"
		}
	}
}
